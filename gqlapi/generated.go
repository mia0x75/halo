// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlapi

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/akhenakh/statgo"
	"github.com/mia0x75/halo/models"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Comment() CommentResolver
	Log() LogResolver
	MutationRoot() MutationRootResolver
	Query() QueryResolver
	QueryRoot() QueryRootResolver
	Role() RoleResolver
	Statement() StatementResolver
	SubscriptionRoot() SubscriptionRootResolver
	Ticket() TicketResolver
	User() UserResolver
}

type DirectiveRoot struct {
	Auth func(ctx context.Context, obj interface{}, next graphql.Resolver, requires []RoleEnum) (res interface{}, err error)

	Date func(ctx context.Context, obj interface{}, next graphql.Resolver, format string) (res interface{}, err error)

	EnumInt func(ctx context.Context, obj interface{}, next graphql.Resolver, value int) (res interface{}, err error)

	Length func(ctx context.Context, obj interface{}, next graphql.Resolver, max int) (res interface{}, err error)

	Lower func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)

	Matches func(ctx context.Context, obj interface{}, next graphql.Resolver, pattern string) (res interface{}, err error)

	Range func(ctx context.Context, obj interface{}, next graphql.Resolver, begin int, end int) (res interface{}, err error)

	Rename func(ctx context.Context, obj interface{}, next graphql.Resolver, to string) (res interface{}, err error)

	Timestamp func(ctx context.Context, obj interface{}, next graphql.Resolver, format string) (res interface{}, err error)

	Trim func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)

	Upper func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)

	Uuid func(ctx context.Context, obj interface{}, next graphql.Resolver, name *string, from []*string) (res interface{}, err error)
}

type ComplexityRoot struct {
	ActivatePayload struct {
		Email func(childComplexity int) int
	}

	Avatar struct {
		CreateAt func(childComplexity int) int
		URL      func(childComplexity int) int
		UUID     func(childComplexity int) int
		UpdateAt func(childComplexity int) int
	}

	CPUStats struct {
		IOWait    func(childComplexity int) int
		Idle      func(childComplexity int) int
		Kernel    func(childComplexity int) int
		LoadMin1  func(childComplexity int) int
		LoadMin15 func(childComplexity int) int
		LoadMin5  func(childComplexity int) int
		Nice      func(childComplexity int) int
		Swap      func(childComplexity int) int
		User      func(childComplexity int) int
	}

	Cluster struct {
		Alias    func(childComplexity int) int
		CreateAt func(childComplexity int) int
		Host     func(childComplexity int) int
		IP       func(childComplexity int) int
		Port     func(childComplexity int) int
		Status   func(childComplexity int) int
		UUID     func(childComplexity int) int
		UpdateAt func(childComplexity int) int
		User     func(childComplexity int) int
	}

	ClusterConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ClusterEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Comment struct {
		Content  func(childComplexity int) int
		CreateAt func(childComplexity int) int
		Ticket   func(childComplexity int) int
		UUID     func(childComplexity int) int
		UpdateAt func(childComplexity int) int
		User     func(childComplexity int) int
	}

	CommentConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CommentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Cron struct {
		Cmd       func(childComplexity int) int
		CreateAt  func(childComplexity int) int
		Duration  func(childComplexity int) int
		Interval  func(childComplexity int) int
		LastRun   func(childComplexity int) int
		Name      func(childComplexity int) int
		NextRun   func(childComplexity int) int
		Params    func(childComplexity int) int
		Recurrent func(childComplexity int) int
		Status    func(childComplexity int) int
		UUID      func(childComplexity int) int
		UpdateAt  func(childComplexity int) int
	}

	CronConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CronEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Database struct {
		Charset func(childComplexity int) int
		Collate func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	Environments struct {
		CPUStats     func(childComplexity int) int
		HostInfos    func(childComplexity int) int
		MemStats     func(childComplexity int) int
		ProcessStats func(childComplexity int) int
	}

	Glossary struct {
		CreateAt    func(childComplexity int) int
		Description func(childComplexity int) int
		Group       func(childComplexity int) int
		Key         func(childComplexity int) int
		UUID        func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	HostInfos struct {
		BitWidth  func(childComplexity int) int
		HostName  func(childComplexity int) int
		MaxCPUs   func(childComplexity int) int
		NCPUs     func(childComplexity int) int
		OSName    func(childComplexity int) int
		OSRelease func(childComplexity int) int
		OSVersion func(childComplexity int) int
		Platform  func(childComplexity int) int
	}

	Log struct {
		CreateAt  func(childComplexity int) int
		LogID     func(childComplexity int) int
		Operation func(childComplexity int) int
		UUID      func(childComplexity int) int
		User      func(childComplexity int) int
	}

	LogConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LogEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LoginPayload struct {
		Me    func(childComplexity int) int
		Token func(childComplexity int) int
	}

	MemStats struct {
		Cache     func(childComplexity int) int
		Free      func(childComplexity int) int
		SwapFree  func(childComplexity int) int
		SwapTotal func(childComplexity int) int
		SwapUsed  func(childComplexity int) int
		Total     func(childComplexity int) int
		Used      func(childComplexity int) int
	}

	MutationRoot struct {
		Activate             func(childComplexity int, input models.ActivateInput) int
		AnalyzeQuery         func(childComplexity int, input models.SoarQueryInput) int
		CancelCron           func(childComplexity int, id string) int
		CreateCluster        func(childComplexity int, input models.CreateClusterInput) int
		CreateComment        func(childComplexity int, input models.CreateCommentInput) int
		CreateQuery          func(childComplexity int, input models.CreateQueryInput) int
		CreateTicket         func(childComplexity int, input models.CreateTicketInput) int
		CreateUser           func(childComplexity int, input models.CreateUserInput) int
		ExecuteTicket        func(childComplexity int, id string) int
		GrantClusters        func(childComplexity int, input models.GrantClustersInput) int
		GrantReviewers       func(childComplexity int, input models.GrantReviewersInput) int
		GrantRoles           func(childComplexity int, input models.GrantRolesInput) int
		Login                func(childComplexity int, input models.UserLoginInput) int
		Logout               func(childComplexity int) int
		LostPasswd           func(childComplexity int, input models.LostPasswdInput) int
		PatchClusterStatus   func(childComplexity int, input models.PatchClusterStatusInput) int
		PatchOptionValues    func(childComplexity int, input models.PatchOptionValueInput) int
		PatchRuleBitwise     func(childComplexity int, input models.PatchRuleBitwiseInput) int
		PatchRuleValues      func(childComplexity int, input models.PatchRuleValuesInput) int
		PatchTicketStatus    func(childComplexity int, input models.PatchTicketStatusInput) int
		PatchUserStatus      func(childComplexity int, input models.PatchUserStatusInput) int
		Register             func(childComplexity int, input models.UserRegisterInput) int
		RemoveCluster        func(childComplexity int, id string) int
		RemoveTicket         func(childComplexity int, id string) int
		ResendActivationMail func(childComplexity int, input models.ActivateInput) int
		ResetPasswd          func(childComplexity int, input models.ResetPasswdInput) int
		RevokeClusters       func(childComplexity int, input models.RevokeClustersInput) int
		RevokeReviewers      func(childComplexity int, input models.RevokeReviewersInput) int
		RevokeRoles          func(childComplexity int, input models.RevokeRolesInput) int
		RewriteQuery         func(childComplexity int, input models.SoarQueryInput) int
		ScheduleTicket       func(childComplexity int, input models.ScheduleTicketInput) int
		UpdateCluster        func(childComplexity int, input models.UpdateClusterInput) int
		UpdateEmail          func(childComplexity int, input models.PatchEmailInput) int
		UpdatePassword       func(childComplexity int, input models.PatchPasswordInput) int
		UpdateProfile        func(childComplexity int, input models.UpdateProfileInput) int
		UpdateTemplate       func(childComplexity int, input *models.UpdateTemplateInput) int
		UpdateTicket         func(childComplexity int, input models.UpdateTicketInput) int
		UpdateUser           func(childComplexity int, input models.UpdateUserInput) int
	}

	Option struct {
		CreateAt    func(childComplexity int) int
		Description func(childComplexity int) int
		Element     func(childComplexity int) int
		Name        func(childComplexity int) int
		UUID        func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		Value       func(childComplexity int) int
		Writable    func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	ProcessStats struct {
		Running  func(childComplexity int) int
		Sleeping func(childComplexity int) int
		Stopped  func(childComplexity int) int
		Total    func(childComplexity int) int
		Zombie   func(childComplexity int) int
	}

	Query struct {
		Cluster  func(childComplexity int) int
		Content  func(childComplexity int) int
		CreateAt func(childComplexity int) int
		Database func(childComplexity int) int
		Plan     func(childComplexity int) int
		Type     func(childComplexity int) int
		UUID     func(childComplexity int) int
		UpdateAt func(childComplexity int) int
		User     func(childComplexity int) int
	}

	QueryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	QueryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	QueryRoot struct {
		Avatars       func(childComplexity int) int
		Cluster       func(childComplexity int, id string) int
		ClusterSearch func(childComplexity int, search string, after *string, before *string, first *int, last *int) int
		Clusters      func(childComplexity int, after *string, before *string, first *int, last *int) int
		Cron          func(childComplexity int, id string) int
		Crons         func(childComplexity int, after *string, before *string, first *int, last *int) int
		Databases     func(childComplexity int, clusterUUID string) int
		Environments  func(childComplexity int) int
		Glossaries    func(childComplexity int, groups []string) int
		Logs          func(childComplexity int, after *string, before *string, first *int, last *int) int
		Me            func(childComplexity int) int
		Metadata      func(childComplexity int, clusterUUID string, database string) int
		Option        func(childComplexity int, id string) int
		Options       func(childComplexity int) int
		Queries       func(childComplexity int, after *string, before *string, first *int, last *int) int
		Query         func(childComplexity int, id string) int
		QuerySearch   func(childComplexity int, search string, after *string, before *string, first *int, last *int) int
		Role          func(childComplexity int, id string) int
		Roles         func(childComplexity int) int
		Rule          func(childComplexity int, id string) int
		Rules         func(childComplexity int) int
		Statistics    func(childComplexity int, groups []string) int
		Tasks         func(childComplexity int) int
		Templates     func(childComplexity int) int
		TestCluster   func(childComplexity int, input *models.ValidateConnectionInput) int
		TestRegexp    func(childComplexity int, input *models.ValidatePatternInput) int
		Ticket        func(childComplexity int, id string) int
		TicketSearch  func(childComplexity int, search string, after *string, before *string, first *int, last *int) int
		Tickets       func(childComplexity int, after *string, before *string, first *int, last *int) int
		User          func(childComplexity int, id string) int
		UserSearch    func(childComplexity int, search string, after *string, before *string, first *int, last *int) int
		Users         func(childComplexity int, after *string, before *string, first *int, last *int) int
	}

	Role struct {
		CreateAt    func(childComplexity int) int
		Description func(childComplexity int) int
		Name        func(childComplexity int) int
		UUID        func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		Users       func(childComplexity int, after *string, before *string, first *int, last *int) int
	}

	Rule struct {
		Bitwise     func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		Description func(childComplexity int) int
		Element     func(childComplexity int) int
		Func        func(childComplexity int) int
		Group       func(childComplexity int) int
		Message     func(childComplexity int) int
		Name        func(childComplexity int) int
		UUID        func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		Values      func(childComplexity int) int
		VldrGroup   func(childComplexity int) int
	}

	Statement struct {
		Content      func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		Plan         func(childComplexity int) int
		Report       func(childComplexity int) int
		RowsAffected func(childComplexity int) int
		Sequence     func(childComplexity int) int
		Status       func(childComplexity int) int
		Ticket       func(childComplexity int) int
		TypeDesc     func(childComplexity int) int
		UUID         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
	}

	StatementConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	StatementEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Statistic struct {
		CreateAt func(childComplexity int) int
		Group    func(childComplexity int) int
		Key      func(childComplexity int) int
		UUID     func(childComplexity int) int
		UpdateAt func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	SubscriptionRoot struct {
		TicketStatusChanged func(childComplexity int) int
	}

	Template struct {
		Body        func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		Description func(childComplexity int) int
		Subject     func(childComplexity int) int
		UUID        func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
	}

	Ticket struct {
		Cluster    func(childComplexity int) int
		Comments   func(childComplexity int, after *string, before *string, first *int, last *int) int
		Content    func(childComplexity int) int
		CreateAt   func(childComplexity int) int
		Cron       func(childComplexity int) int
		Database   func(childComplexity int) int
		Reviewer   func(childComplexity int) int
		Statements func(childComplexity int, after *string, before *string, first *int, last *int) int
		Status     func(childComplexity int) int
		Subject    func(childComplexity int) int
		UUID       func(childComplexity int) int
		UpdateAt   func(childComplexity int) int
		User       func(childComplexity int) int
	}

	TicketConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TicketEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TicketStatusChangePayload struct {
		Message    func(childComplexity int) int
		TicketUUID func(childComplexity int) int
	}

	User struct {
		Avatar     func(childComplexity int) int
		Clusters   func(childComplexity int, after *string, before *string, first *int, last *int) int
		CreateAt   func(childComplexity int) int
		Email      func(childComplexity int) int
		Name       func(childComplexity int) int
		Phone      func(childComplexity int) int
		Queries    func(childComplexity int, after *string, before *string, first *int, last *int) int
		Reviewers  func(childComplexity int) int
		Roles      func(childComplexity int) int
		Statistics func(childComplexity int) int
		Status     func(childComplexity int) int
		Tickets    func(childComplexity int, after *string, before *string, first *int, last *int) int
		UUID       func(childComplexity int) int
		UpdateAt   func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type CommentResolver interface {
	User(ctx context.Context, obj *models.Comment) (*models.User, error)
	Ticket(ctx context.Context, obj *models.Comment) (*models.Ticket, error)
}
type LogResolver interface {
	User(ctx context.Context, obj *models.Log) (*models.User, error)
}
type MutationRootResolver interface {
	Register(ctx context.Context, input models.UserRegisterInput) (*models.User, error)
	Login(ctx context.Context, input models.UserLoginInput) (*LoginPayload, error)
	Logout(ctx context.Context) (bool, error)
	UpdateProfile(ctx context.Context, input models.UpdateProfileInput) (*models.User, error)
	UpdatePassword(ctx context.Context, input models.PatchPasswordInput) (bool, error)
	UpdateEmail(ctx context.Context, input models.PatchEmailInput) (bool, error)
	GrantReviewers(ctx context.Context, input models.GrantReviewersInput) (bool, error)
	RevokeReviewers(ctx context.Context, input models.RevokeReviewersInput) (bool, error)
	GrantClusters(ctx context.Context, input models.GrantClustersInput) (bool, error)
	RevokeClusters(ctx context.Context, input models.RevokeClustersInput) (bool, error)
	GrantRoles(ctx context.Context, input models.GrantRolesInput) (bool, error)
	RevokeRoles(ctx context.Context, input models.RevokeRolesInput) (bool, error)
	CreateUser(ctx context.Context, input models.CreateUserInput) (*models.User, error)
	UpdateUser(ctx context.Context, input models.UpdateUserInput) (*models.User, error)
	PatchUserStatus(ctx context.Context, input models.PatchUserStatusInput) (bool, error)
	CreateCluster(ctx context.Context, input models.CreateClusterInput) (*models.Cluster, error)
	UpdateCluster(ctx context.Context, input models.UpdateClusterInput) (*models.Cluster, error)
	RemoveCluster(ctx context.Context, id string) (bool, error)
	PatchClusterStatus(ctx context.Context, input models.PatchClusterStatusInput) (bool, error)
	UpdateTemplate(ctx context.Context, input *models.UpdateTemplateInput) (*models.Template, error)
	CreateTicket(ctx context.Context, input models.CreateTicketInput) (*models.Ticket, error)
	UpdateTicket(ctx context.Context, input models.UpdateTicketInput) (*models.Ticket, error)
	RemoveTicket(ctx context.Context, id string) (bool, error)
	PatchTicketStatus(ctx context.Context, input models.PatchTicketStatusInput) (bool, error)
	ExecuteTicket(ctx context.Context, id string) (bool, error)
	ScheduleTicket(ctx context.Context, input models.ScheduleTicketInput) (*models.Cron, error)
	CancelCron(ctx context.Context, id string) (bool, error)
	CreateComment(ctx context.Context, input models.CreateCommentInput) (*models.Comment, error)
	PatchOptionValues(ctx context.Context, input models.PatchOptionValueInput) (bool, error)
	PatchRuleValues(ctx context.Context, input models.PatchRuleValuesInput) (bool, error)
	PatchRuleBitwise(ctx context.Context, input models.PatchRuleBitwiseInput) (bool, error)
	CreateQuery(ctx context.Context, input models.CreateQueryInput) (string, error)
	AnalyzeQuery(ctx context.Context, input models.SoarQueryInput) (string, error)
	RewriteQuery(ctx context.Context, input models.SoarQueryInput) (string, error)
	Activate(ctx context.Context, input models.ActivateInput) (*ActivatePayload, error)
	LostPasswd(ctx context.Context, input models.LostPasswdInput) (bool, error)
	ResetPasswd(ctx context.Context, input models.ResetPasswdInput) (bool, error)
	ResendActivationMail(ctx context.Context, input models.ActivateInput) (bool, error)
}
type QueryResolver interface {
	Cluster(ctx context.Context, obj *models.Query) (*models.Cluster, error)

	User(ctx context.Context, obj *models.Query) (*models.User, error)
}
type QueryRootResolver interface {
	Cluster(ctx context.Context, id string) (*models.Cluster, error)
	Clusters(ctx context.Context, after *string, before *string, first *int, last *int) (*ClusterConnection, error)
	ClusterSearch(ctx context.Context, search string, after *string, before *string, first *int, last *int) (*ClusterConnection, error)
	Logs(ctx context.Context, after *string, before *string, first *int, last *int) (*LogConnection, error)
	Me(ctx context.Context) (*models.User, error)
	Options(ctx context.Context) ([]*models.Option, error)
	Option(ctx context.Context, id string) (*models.Option, error)
	Query(ctx context.Context, id string) (*models.Query, error)
	Queries(ctx context.Context, after *string, before *string, first *int, last *int) (*QueryConnection, error)
	QuerySearch(ctx context.Context, search string, after *string, before *string, first *int, last *int) (*QueryConnection, error)
	Templates(ctx context.Context) ([]*models.Template, error)
	Ticket(ctx context.Context, id string) (*models.Ticket, error)
	Tickets(ctx context.Context, after *string, before *string, first *int, last *int) (*TicketConnection, error)
	TicketSearch(ctx context.Context, search string, after *string, before *string, first *int, last *int) (*TicketConnection, error)
	User(ctx context.Context, id string) (*models.User, error)
	Users(ctx context.Context, after *string, before *string, first *int, last *int) (*UserConnection, error)
	UserSearch(ctx context.Context, search string, after *string, before *string, first *int, last *int) (*UserConnection, error)
	Avatars(ctx context.Context) ([]*models.Avatar, error)
	Rule(ctx context.Context, id string) (*models.Rule, error)
	Rules(ctx context.Context) ([]*models.Rule, error)
	Role(ctx context.Context, id string) (*models.Role, error)
	Roles(ctx context.Context) ([]*models.Role, error)
	Glossaries(ctx context.Context, groups []string) ([]*models.Glossary, error)
	Cron(ctx context.Context, id string) (*models.Cron, error)
	Crons(ctx context.Context, after *string, before *string, first *int, last *int) (*CronConnection, error)
	Tasks(ctx context.Context) ([]*models.Cron, error)
	Databases(ctx context.Context, clusterUUID string) ([]*Database, error)
	Statistics(ctx context.Context, groups []string) ([]*models.Statistic, error)
	Environments(ctx context.Context) (*Environments, error)
	Metadata(ctx context.Context, clusterUUID string, database string) (string, error)
	TestCluster(ctx context.Context, input *models.ValidateConnectionInput) (bool, error)
	TestRegexp(ctx context.Context, input *models.ValidatePatternInput) (bool, error)
}
type RoleResolver interface {
	Users(ctx context.Context, obj *models.Role, after *string, before *string, first *int, last *int) (*UserConnection, error)
}
type StatementResolver interface {
	TypeDesc(ctx context.Context, obj *models.Statement) (string, error)

	Ticket(ctx context.Context, obj *models.Statement) (*models.Ticket, error)
}
type SubscriptionRootResolver interface {
	TicketStatusChanged(ctx context.Context) (<-chan *TicketStatusChangePayload, error)
}
type TicketResolver interface {
	Cluster(ctx context.Context, obj *models.Ticket) (*models.Cluster, error)

	User(ctx context.Context, obj *models.Ticket) (*models.User, error)
	Reviewer(ctx context.Context, obj *models.Ticket) (*models.User, error)
	Cron(ctx context.Context, obj *models.Ticket) (*models.Cron, error)
	Statements(ctx context.Context, obj *models.Ticket, after *string, before *string, first *int, last *int) (*StatementConnection, error)
	Comments(ctx context.Context, obj *models.Ticket, after *string, before *string, first *int, last *int) (*CommentConnection, error)
}
type UserResolver interface {
	Avatar(ctx context.Context, obj *models.User) (*models.Avatar, error)
	Roles(ctx context.Context, obj *models.User) ([]*models.Role, error)
	Reviewers(ctx context.Context, obj *models.User) ([]*models.User, error)
	Statistics(ctx context.Context, obj *models.User) ([]*models.Statistic, error)
	Clusters(ctx context.Context, obj *models.User, after *string, before *string, first *int, last *int) (*ClusterConnection, error)
	Tickets(ctx context.Context, obj *models.User, after *string, before *string, first *int, last *int) (*TicketConnection, error)
	Queries(ctx context.Context, obj *models.User, after *string, before *string, first *int, last *int) (*QueryConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ActivatePayload.Email":
		if e.complexity.ActivatePayload.Email == nil {
			break
		}

		return e.complexity.ActivatePayload.Email(childComplexity), true

	case "Avatar.CreateAt":
		if e.complexity.Avatar.CreateAt == nil {
			break
		}

		return e.complexity.Avatar.CreateAt(childComplexity), true

	case "Avatar.URL":
		if e.complexity.Avatar.URL == nil {
			break
		}

		return e.complexity.Avatar.URL(childComplexity), true

	case "Avatar.UUID":
		if e.complexity.Avatar.UUID == nil {
			break
		}

		return e.complexity.Avatar.UUID(childComplexity), true

	case "Avatar.UpdateAt":
		if e.complexity.Avatar.UpdateAt == nil {
			break
		}

		return e.complexity.Avatar.UpdateAt(childComplexity), true

	case "CPUStats.IOWait":
		if e.complexity.CPUStats.IOWait == nil {
			break
		}

		return e.complexity.CPUStats.IOWait(childComplexity), true

	case "CPUStats.Idle":
		if e.complexity.CPUStats.Idle == nil {
			break
		}

		return e.complexity.CPUStats.Idle(childComplexity), true

	case "CPUStats.Kernel":
		if e.complexity.CPUStats.Kernel == nil {
			break
		}

		return e.complexity.CPUStats.Kernel(childComplexity), true

	case "CPUStats.LoadMin1":
		if e.complexity.CPUStats.LoadMin1 == nil {
			break
		}

		return e.complexity.CPUStats.LoadMin1(childComplexity), true

	case "CPUStats.LoadMin15":
		if e.complexity.CPUStats.LoadMin15 == nil {
			break
		}

		return e.complexity.CPUStats.LoadMin15(childComplexity), true

	case "CPUStats.LoadMin5":
		if e.complexity.CPUStats.LoadMin5 == nil {
			break
		}

		return e.complexity.CPUStats.LoadMin5(childComplexity), true

	case "CPUStats.Nice":
		if e.complexity.CPUStats.Nice == nil {
			break
		}

		return e.complexity.CPUStats.Nice(childComplexity), true

	case "CPUStats.Swap":
		if e.complexity.CPUStats.Swap == nil {
			break
		}

		return e.complexity.CPUStats.Swap(childComplexity), true

	case "CPUStats.User":
		if e.complexity.CPUStats.User == nil {
			break
		}

		return e.complexity.CPUStats.User(childComplexity), true

	case "Cluster.Alias":
		if e.complexity.Cluster.Alias == nil {
			break
		}

		return e.complexity.Cluster.Alias(childComplexity), true

	case "Cluster.CreateAt":
		if e.complexity.Cluster.CreateAt == nil {
			break
		}

		return e.complexity.Cluster.CreateAt(childComplexity), true

	case "Cluster.Host":
		if e.complexity.Cluster.Host == nil {
			break
		}

		return e.complexity.Cluster.Host(childComplexity), true

	case "Cluster.IP":
		if e.complexity.Cluster.IP == nil {
			break
		}

		return e.complexity.Cluster.IP(childComplexity), true

	case "Cluster.Port":
		if e.complexity.Cluster.Port == nil {
			break
		}

		return e.complexity.Cluster.Port(childComplexity), true

	case "Cluster.Status":
		if e.complexity.Cluster.Status == nil {
			break
		}

		return e.complexity.Cluster.Status(childComplexity), true

	case "Cluster.UUID":
		if e.complexity.Cluster.UUID == nil {
			break
		}

		return e.complexity.Cluster.UUID(childComplexity), true

	case "Cluster.UpdateAt":
		if e.complexity.Cluster.UpdateAt == nil {
			break
		}

		return e.complexity.Cluster.UpdateAt(childComplexity), true

	case "Cluster.User":
		if e.complexity.Cluster.User == nil {
			break
		}

		return e.complexity.Cluster.User(childComplexity), true

	case "ClusterConnection.edges":
		if e.complexity.ClusterConnection.Edges == nil {
			break
		}

		return e.complexity.ClusterConnection.Edges(childComplexity), true

	case "ClusterConnection.pageInfo":
		if e.complexity.ClusterConnection.PageInfo == nil {
			break
		}

		return e.complexity.ClusterConnection.PageInfo(childComplexity), true

	case "ClusterConnection.totalCount":
		if e.complexity.ClusterConnection.TotalCount == nil {
			break
		}

		return e.complexity.ClusterConnection.TotalCount(childComplexity), true

	case "ClusterEdge.cursor":
		if e.complexity.ClusterEdge.Cursor == nil {
			break
		}

		return e.complexity.ClusterEdge.Cursor(childComplexity), true

	case "ClusterEdge.node":
		if e.complexity.ClusterEdge.Node == nil {
			break
		}

		return e.complexity.ClusterEdge.Node(childComplexity), true

	case "Comment.Content":
		if e.complexity.Comment.Content == nil {
			break
		}

		return e.complexity.Comment.Content(childComplexity), true

	case "Comment.CreateAt":
		if e.complexity.Comment.CreateAt == nil {
			break
		}

		return e.complexity.Comment.CreateAt(childComplexity), true

	case "Comment.Ticket":
		if e.complexity.Comment.Ticket == nil {
			break
		}

		return e.complexity.Comment.Ticket(childComplexity), true

	case "Comment.UUID":
		if e.complexity.Comment.UUID == nil {
			break
		}

		return e.complexity.Comment.UUID(childComplexity), true

	case "Comment.UpdateAt":
		if e.complexity.Comment.UpdateAt == nil {
			break
		}

		return e.complexity.Comment.UpdateAt(childComplexity), true

	case "Comment.User":
		if e.complexity.Comment.User == nil {
			break
		}

		return e.complexity.Comment.User(childComplexity), true

	case "CommentConnection.edges":
		if e.complexity.CommentConnection.Edges == nil {
			break
		}

		return e.complexity.CommentConnection.Edges(childComplexity), true

	case "CommentConnection.pageInfo":
		if e.complexity.CommentConnection.PageInfo == nil {
			break
		}

		return e.complexity.CommentConnection.PageInfo(childComplexity), true

	case "CommentConnection.totalCount":
		if e.complexity.CommentConnection.TotalCount == nil {
			break
		}

		return e.complexity.CommentConnection.TotalCount(childComplexity), true

	case "CommentEdge.cursor":
		if e.complexity.CommentEdge.Cursor == nil {
			break
		}

		return e.complexity.CommentEdge.Cursor(childComplexity), true

	case "CommentEdge.node":
		if e.complexity.CommentEdge.Node == nil {
			break
		}

		return e.complexity.CommentEdge.Node(childComplexity), true

	case "Cron.Cmd":
		if e.complexity.Cron.Cmd == nil {
			break
		}

		return e.complexity.Cron.Cmd(childComplexity), true

	case "Cron.CreateAt":
		if e.complexity.Cron.CreateAt == nil {
			break
		}

		return e.complexity.Cron.CreateAt(childComplexity), true

	case "Cron.Duration":
		if e.complexity.Cron.Duration == nil {
			break
		}

		return e.complexity.Cron.Duration(childComplexity), true

	case "Cron.Interval":
		if e.complexity.Cron.Interval == nil {
			break
		}

		return e.complexity.Cron.Interval(childComplexity), true

	case "Cron.LastRun":
		if e.complexity.Cron.LastRun == nil {
			break
		}

		return e.complexity.Cron.LastRun(childComplexity), true

	case "Cron.Name":
		if e.complexity.Cron.Name == nil {
			break
		}

		return e.complexity.Cron.Name(childComplexity), true

	case "Cron.NextRun":
		if e.complexity.Cron.NextRun == nil {
			break
		}

		return e.complexity.Cron.NextRun(childComplexity), true

	case "Cron.Params":
		if e.complexity.Cron.Params == nil {
			break
		}

		return e.complexity.Cron.Params(childComplexity), true

	case "Cron.Recurrent":
		if e.complexity.Cron.Recurrent == nil {
			break
		}

		return e.complexity.Cron.Recurrent(childComplexity), true

	case "Cron.Status":
		if e.complexity.Cron.Status == nil {
			break
		}

		return e.complexity.Cron.Status(childComplexity), true

	case "Cron.UUID":
		if e.complexity.Cron.UUID == nil {
			break
		}

		return e.complexity.Cron.UUID(childComplexity), true

	case "Cron.UpdateAt":
		if e.complexity.Cron.UpdateAt == nil {
			break
		}

		return e.complexity.Cron.UpdateAt(childComplexity), true

	case "CronConnection.edges":
		if e.complexity.CronConnection.Edges == nil {
			break
		}

		return e.complexity.CronConnection.Edges(childComplexity), true

	case "CronConnection.pageInfo":
		if e.complexity.CronConnection.PageInfo == nil {
			break
		}

		return e.complexity.CronConnection.PageInfo(childComplexity), true

	case "CronConnection.totalCount":
		if e.complexity.CronConnection.TotalCount == nil {
			break
		}

		return e.complexity.CronConnection.TotalCount(childComplexity), true

	case "CronEdge.cursor":
		if e.complexity.CronEdge.Cursor == nil {
			break
		}

		return e.complexity.CronEdge.Cursor(childComplexity), true

	case "CronEdge.node":
		if e.complexity.CronEdge.Node == nil {
			break
		}

		return e.complexity.CronEdge.Node(childComplexity), true

	case "Database.Charset":
		if e.complexity.Database.Charset == nil {
			break
		}

		return e.complexity.Database.Charset(childComplexity), true

	case "Database.Collate":
		if e.complexity.Database.Collate == nil {
			break
		}

		return e.complexity.Database.Collate(childComplexity), true

	case "Database.Name":
		if e.complexity.Database.Name == nil {
			break
		}

		return e.complexity.Database.Name(childComplexity), true

	case "Environments.CPUStats":
		if e.complexity.Environments.CPUStats == nil {
			break
		}

		return e.complexity.Environments.CPUStats(childComplexity), true

	case "Environments.HostInfos":
		if e.complexity.Environments.HostInfos == nil {
			break
		}

		return e.complexity.Environments.HostInfos(childComplexity), true

	case "Environments.MemStats":
		if e.complexity.Environments.MemStats == nil {
			break
		}

		return e.complexity.Environments.MemStats(childComplexity), true

	case "Environments.ProcessStats":
		if e.complexity.Environments.ProcessStats == nil {
			break
		}

		return e.complexity.Environments.ProcessStats(childComplexity), true

	case "Glossary.CreateAt":
		if e.complexity.Glossary.CreateAt == nil {
			break
		}

		return e.complexity.Glossary.CreateAt(childComplexity), true

	case "Glossary.Description":
		if e.complexity.Glossary.Description == nil {
			break
		}

		return e.complexity.Glossary.Description(childComplexity), true

	case "Glossary.Group":
		if e.complexity.Glossary.Group == nil {
			break
		}

		return e.complexity.Glossary.Group(childComplexity), true

	case "Glossary.Key":
		if e.complexity.Glossary.Key == nil {
			break
		}

		return e.complexity.Glossary.Key(childComplexity), true

	case "Glossary.UUID":
		if e.complexity.Glossary.UUID == nil {
			break
		}

		return e.complexity.Glossary.UUID(childComplexity), true

	case "Glossary.UpdateAt":
		if e.complexity.Glossary.UpdateAt == nil {
			break
		}

		return e.complexity.Glossary.UpdateAt(childComplexity), true

	case "Glossary.Value":
		if e.complexity.Glossary.Value == nil {
			break
		}

		return e.complexity.Glossary.Value(childComplexity), true

	case "HostInfos.BitWidth":
		if e.complexity.HostInfos.BitWidth == nil {
			break
		}

		return e.complexity.HostInfos.BitWidth(childComplexity), true

	case "HostInfos.HostName":
		if e.complexity.HostInfos.HostName == nil {
			break
		}

		return e.complexity.HostInfos.HostName(childComplexity), true

	case "HostInfos.MaxCPUs":
		if e.complexity.HostInfos.MaxCPUs == nil {
			break
		}

		return e.complexity.HostInfos.MaxCPUs(childComplexity), true

	case "HostInfos.NCPUs":
		if e.complexity.HostInfos.NCPUs == nil {
			break
		}

		return e.complexity.HostInfos.NCPUs(childComplexity), true

	case "HostInfos.OSName":
		if e.complexity.HostInfos.OSName == nil {
			break
		}

		return e.complexity.HostInfos.OSName(childComplexity), true

	case "HostInfos.OSRelease":
		if e.complexity.HostInfos.OSRelease == nil {
			break
		}

		return e.complexity.HostInfos.OSRelease(childComplexity), true

	case "HostInfos.OSVersion":
		if e.complexity.HostInfos.OSVersion == nil {
			break
		}

		return e.complexity.HostInfos.OSVersion(childComplexity), true

	case "HostInfos.Platform":
		if e.complexity.HostInfos.Platform == nil {
			break
		}

		return e.complexity.HostInfos.Platform(childComplexity), true

	case "Log.CreateAt":
		if e.complexity.Log.CreateAt == nil {
			break
		}

		return e.complexity.Log.CreateAt(childComplexity), true

	case "Log.LogID":
		if e.complexity.Log.LogID == nil {
			break
		}

		return e.complexity.Log.LogID(childComplexity), true

	case "Log.Operation":
		if e.complexity.Log.Operation == nil {
			break
		}

		return e.complexity.Log.Operation(childComplexity), true

	case "Log.UUID":
		if e.complexity.Log.UUID == nil {
			break
		}

		return e.complexity.Log.UUID(childComplexity), true

	case "Log.User":
		if e.complexity.Log.User == nil {
			break
		}

		return e.complexity.Log.User(childComplexity), true

	case "LogConnection.edges":
		if e.complexity.LogConnection.Edges == nil {
			break
		}

		return e.complexity.LogConnection.Edges(childComplexity), true

	case "LogConnection.pageInfo":
		if e.complexity.LogConnection.PageInfo == nil {
			break
		}

		return e.complexity.LogConnection.PageInfo(childComplexity), true

	case "LogConnection.totalCount":
		if e.complexity.LogConnection.TotalCount == nil {
			break
		}

		return e.complexity.LogConnection.TotalCount(childComplexity), true

	case "LogEdge.cursor":
		if e.complexity.LogEdge.Cursor == nil {
			break
		}

		return e.complexity.LogEdge.Cursor(childComplexity), true

	case "LogEdge.node":
		if e.complexity.LogEdge.Node == nil {
			break
		}

		return e.complexity.LogEdge.Node(childComplexity), true

	case "LoginPayload.Me":
		if e.complexity.LoginPayload.Me == nil {
			break
		}

		return e.complexity.LoginPayload.Me(childComplexity), true

	case "LoginPayload.Token":
		if e.complexity.LoginPayload.Token == nil {
			break
		}

		return e.complexity.LoginPayload.Token(childComplexity), true

	case "MemStats.Cache":
		if e.complexity.MemStats.Cache == nil {
			break
		}

		return e.complexity.MemStats.Cache(childComplexity), true

	case "MemStats.Free":
		if e.complexity.MemStats.Free == nil {
			break
		}

		return e.complexity.MemStats.Free(childComplexity), true

	case "MemStats.SwapFree":
		if e.complexity.MemStats.SwapFree == nil {
			break
		}

		return e.complexity.MemStats.SwapFree(childComplexity), true

	case "MemStats.SwapTotal":
		if e.complexity.MemStats.SwapTotal == nil {
			break
		}

		return e.complexity.MemStats.SwapTotal(childComplexity), true

	case "MemStats.SwapUsed":
		if e.complexity.MemStats.SwapUsed == nil {
			break
		}

		return e.complexity.MemStats.SwapUsed(childComplexity), true

	case "MemStats.Total":
		if e.complexity.MemStats.Total == nil {
			break
		}

		return e.complexity.MemStats.Total(childComplexity), true

	case "MemStats.Used":
		if e.complexity.MemStats.Used == nil {
			break
		}

		return e.complexity.MemStats.Used(childComplexity), true

	case "MutationRoot.activate":
		if e.complexity.MutationRoot.Activate == nil {
			break
		}

		args, err := ec.field_MutationRoot_activate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.Activate(childComplexity, args["input"].(models.ActivateInput)), true

	case "MutationRoot.analyzeQuery":
		if e.complexity.MutationRoot.AnalyzeQuery == nil {
			break
		}

		args, err := ec.field_MutationRoot_analyzeQuery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.AnalyzeQuery(childComplexity, args["input"].(models.SoarQueryInput)), true

	case "MutationRoot.cancelCron":
		if e.complexity.MutationRoot.CancelCron == nil {
			break
		}

		args, err := ec.field_MutationRoot_cancelCron_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.CancelCron(childComplexity, args["id"].(string)), true

	case "MutationRoot.createCluster":
		if e.complexity.MutationRoot.CreateCluster == nil {
			break
		}

		args, err := ec.field_MutationRoot_createCluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.CreateCluster(childComplexity, args["input"].(models.CreateClusterInput)), true

	case "MutationRoot.createComment":
		if e.complexity.MutationRoot.CreateComment == nil {
			break
		}

		args, err := ec.field_MutationRoot_createComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.CreateComment(childComplexity, args["input"].(models.CreateCommentInput)), true

	case "MutationRoot.createQuery":
		if e.complexity.MutationRoot.CreateQuery == nil {
			break
		}

		args, err := ec.field_MutationRoot_createQuery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.CreateQuery(childComplexity, args["input"].(models.CreateQueryInput)), true

	case "MutationRoot.createTicket":
		if e.complexity.MutationRoot.CreateTicket == nil {
			break
		}

		args, err := ec.field_MutationRoot_createTicket_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.CreateTicket(childComplexity, args["input"].(models.CreateTicketInput)), true

	case "MutationRoot.createUser":
		if e.complexity.MutationRoot.CreateUser == nil {
			break
		}

		args, err := ec.field_MutationRoot_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.CreateUser(childComplexity, args["input"].(models.CreateUserInput)), true

	case "MutationRoot.executeTicket":
		if e.complexity.MutationRoot.ExecuteTicket == nil {
			break
		}

		args, err := ec.field_MutationRoot_executeTicket_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.ExecuteTicket(childComplexity, args["id"].(string)), true

	case "MutationRoot.grantClusters":
		if e.complexity.MutationRoot.GrantClusters == nil {
			break
		}

		args, err := ec.field_MutationRoot_grantClusters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.GrantClusters(childComplexity, args["input"].(models.GrantClustersInput)), true

	case "MutationRoot.grantReviewers":
		if e.complexity.MutationRoot.GrantReviewers == nil {
			break
		}

		args, err := ec.field_MutationRoot_grantReviewers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.GrantReviewers(childComplexity, args["input"].(models.GrantReviewersInput)), true

	case "MutationRoot.grantRoles":
		if e.complexity.MutationRoot.GrantRoles == nil {
			break
		}

		args, err := ec.field_MutationRoot_grantRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.GrantRoles(childComplexity, args["input"].(models.GrantRolesInput)), true

	case "MutationRoot.login":
		if e.complexity.MutationRoot.Login == nil {
			break
		}

		args, err := ec.field_MutationRoot_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.Login(childComplexity, args["input"].(models.UserLoginInput)), true

	case "MutationRoot.logout":
		if e.complexity.MutationRoot.Logout == nil {
			break
		}

		return e.complexity.MutationRoot.Logout(childComplexity), true

	case "MutationRoot.lostPasswd":
		if e.complexity.MutationRoot.LostPasswd == nil {
			break
		}

		args, err := ec.field_MutationRoot_lostPasswd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.LostPasswd(childComplexity, args["input"].(models.LostPasswdInput)), true

	case "MutationRoot.patchClusterStatus":
		if e.complexity.MutationRoot.PatchClusterStatus == nil {
			break
		}

		args, err := ec.field_MutationRoot_patchClusterStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.PatchClusterStatus(childComplexity, args["input"].(models.PatchClusterStatusInput)), true

	case "MutationRoot.patchOptionValues":
		if e.complexity.MutationRoot.PatchOptionValues == nil {
			break
		}

		args, err := ec.field_MutationRoot_patchOptionValues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.PatchOptionValues(childComplexity, args["input"].(models.PatchOptionValueInput)), true

	case "MutationRoot.patchRuleBitwise":
		if e.complexity.MutationRoot.PatchRuleBitwise == nil {
			break
		}

		args, err := ec.field_MutationRoot_patchRuleBitwise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.PatchRuleBitwise(childComplexity, args["input"].(models.PatchRuleBitwiseInput)), true

	case "MutationRoot.patchRuleValues":
		if e.complexity.MutationRoot.PatchRuleValues == nil {
			break
		}

		args, err := ec.field_MutationRoot_patchRuleValues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.PatchRuleValues(childComplexity, args["input"].(models.PatchRuleValuesInput)), true

	case "MutationRoot.patchTicketStatus":
		if e.complexity.MutationRoot.PatchTicketStatus == nil {
			break
		}

		args, err := ec.field_MutationRoot_patchTicketStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.PatchTicketStatus(childComplexity, args["input"].(models.PatchTicketStatusInput)), true

	case "MutationRoot.patchUserStatus":
		if e.complexity.MutationRoot.PatchUserStatus == nil {
			break
		}

		args, err := ec.field_MutationRoot_patchUserStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.PatchUserStatus(childComplexity, args["input"].(models.PatchUserStatusInput)), true

	case "MutationRoot.register":
		if e.complexity.MutationRoot.Register == nil {
			break
		}

		args, err := ec.field_MutationRoot_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.Register(childComplexity, args["input"].(models.UserRegisterInput)), true

	case "MutationRoot.removeCluster":
		if e.complexity.MutationRoot.RemoveCluster == nil {
			break
		}

		args, err := ec.field_MutationRoot_removeCluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.RemoveCluster(childComplexity, args["id"].(string)), true

	case "MutationRoot.removeTicket":
		if e.complexity.MutationRoot.RemoveTicket == nil {
			break
		}

		args, err := ec.field_MutationRoot_removeTicket_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.RemoveTicket(childComplexity, args["id"].(string)), true

	case "MutationRoot.resendActivationMail":
		if e.complexity.MutationRoot.ResendActivationMail == nil {
			break
		}

		args, err := ec.field_MutationRoot_resendActivationMail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.ResendActivationMail(childComplexity, args["input"].(models.ActivateInput)), true

	case "MutationRoot.resetPasswd":
		if e.complexity.MutationRoot.ResetPasswd == nil {
			break
		}

		args, err := ec.field_MutationRoot_resetPasswd_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.ResetPasswd(childComplexity, args["input"].(models.ResetPasswdInput)), true

	case "MutationRoot.revokeClusters":
		if e.complexity.MutationRoot.RevokeClusters == nil {
			break
		}

		args, err := ec.field_MutationRoot_revokeClusters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.RevokeClusters(childComplexity, args["input"].(models.RevokeClustersInput)), true

	case "MutationRoot.revokeReviewers":
		if e.complexity.MutationRoot.RevokeReviewers == nil {
			break
		}

		args, err := ec.field_MutationRoot_revokeReviewers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.RevokeReviewers(childComplexity, args["input"].(models.RevokeReviewersInput)), true

	case "MutationRoot.revokeRoles":
		if e.complexity.MutationRoot.RevokeRoles == nil {
			break
		}

		args, err := ec.field_MutationRoot_revokeRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.RevokeRoles(childComplexity, args["input"].(models.RevokeRolesInput)), true

	case "MutationRoot.rewriteQuery":
		if e.complexity.MutationRoot.RewriteQuery == nil {
			break
		}

		args, err := ec.field_MutationRoot_rewriteQuery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.RewriteQuery(childComplexity, args["input"].(models.SoarQueryInput)), true

	case "MutationRoot.scheduleTicket":
		if e.complexity.MutationRoot.ScheduleTicket == nil {
			break
		}

		args, err := ec.field_MutationRoot_scheduleTicket_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.ScheduleTicket(childComplexity, args["input"].(models.ScheduleTicketInput)), true

	case "MutationRoot.updateCluster":
		if e.complexity.MutationRoot.UpdateCluster == nil {
			break
		}

		args, err := ec.field_MutationRoot_updateCluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateCluster(childComplexity, args["input"].(models.UpdateClusterInput)), true

	case "MutationRoot.updateEmail":
		if e.complexity.MutationRoot.UpdateEmail == nil {
			break
		}

		args, err := ec.field_MutationRoot_updateEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateEmail(childComplexity, args["input"].(models.PatchEmailInput)), true

	case "MutationRoot.updatePassword":
		if e.complexity.MutationRoot.UpdatePassword == nil {
			break
		}

		args, err := ec.field_MutationRoot_updatePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdatePassword(childComplexity, args["input"].(models.PatchPasswordInput)), true

	case "MutationRoot.updateProfile":
		if e.complexity.MutationRoot.UpdateProfile == nil {
			break
		}

		args, err := ec.field_MutationRoot_updateProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateProfile(childComplexity, args["input"].(models.UpdateProfileInput)), true

	case "MutationRoot.updateTemplate":
		if e.complexity.MutationRoot.UpdateTemplate == nil {
			break
		}

		args, err := ec.field_MutationRoot_updateTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateTemplate(childComplexity, args["input"].(*models.UpdateTemplateInput)), true

	case "MutationRoot.updateTicket":
		if e.complexity.MutationRoot.UpdateTicket == nil {
			break
		}

		args, err := ec.field_MutationRoot_updateTicket_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateTicket(childComplexity, args["input"].(models.UpdateTicketInput)), true

	case "MutationRoot.updateUser":
		if e.complexity.MutationRoot.UpdateUser == nil {
			break
		}

		args, err := ec.field_MutationRoot_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateUser(childComplexity, args["input"].(models.UpdateUserInput)), true

	case "Option.CreateAt":
		if e.complexity.Option.CreateAt == nil {
			break
		}

		return e.complexity.Option.CreateAt(childComplexity), true

	case "Option.Description":
		if e.complexity.Option.Description == nil {
			break
		}

		return e.complexity.Option.Description(childComplexity), true

	case "Option.Element":
		if e.complexity.Option.Element == nil {
			break
		}

		return e.complexity.Option.Element(childComplexity), true

	case "Option.Name":
		if e.complexity.Option.Name == nil {
			break
		}

		return e.complexity.Option.Name(childComplexity), true

	case "Option.UUID":
		if e.complexity.Option.UUID == nil {
			break
		}

		return e.complexity.Option.UUID(childComplexity), true

	case "Option.UpdateAt":
		if e.complexity.Option.UpdateAt == nil {
			break
		}

		return e.complexity.Option.UpdateAt(childComplexity), true

	case "Option.Value":
		if e.complexity.Option.Value == nil {
			break
		}

		return e.complexity.Option.Value(childComplexity), true

	case "Option.Writable":
		if e.complexity.Option.Writable == nil {
			break
		}

		return e.complexity.Option.Writable(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "ProcessStats.Running":
		if e.complexity.ProcessStats.Running == nil {
			break
		}

		return e.complexity.ProcessStats.Running(childComplexity), true

	case "ProcessStats.Sleeping":
		if e.complexity.ProcessStats.Sleeping == nil {
			break
		}

		return e.complexity.ProcessStats.Sleeping(childComplexity), true

	case "ProcessStats.Stopped":
		if e.complexity.ProcessStats.Stopped == nil {
			break
		}

		return e.complexity.ProcessStats.Stopped(childComplexity), true

	case "ProcessStats.Total":
		if e.complexity.ProcessStats.Total == nil {
			break
		}

		return e.complexity.ProcessStats.Total(childComplexity), true

	case "ProcessStats.Zombie":
		if e.complexity.ProcessStats.Zombie == nil {
			break
		}

		return e.complexity.ProcessStats.Zombie(childComplexity), true

	case "Query.Cluster":
		if e.complexity.Query.Cluster == nil {
			break
		}

		return e.complexity.Query.Cluster(childComplexity), true

	case "Query.Content":
		if e.complexity.Query.Content == nil {
			break
		}

		return e.complexity.Query.Content(childComplexity), true

	case "Query.CreateAt":
		if e.complexity.Query.CreateAt == nil {
			break
		}

		return e.complexity.Query.CreateAt(childComplexity), true

	case "Query.Database":
		if e.complexity.Query.Database == nil {
			break
		}

		return e.complexity.Query.Database(childComplexity), true

	case "Query.Plan":
		if e.complexity.Query.Plan == nil {
			break
		}

		return e.complexity.Query.Plan(childComplexity), true

	case "Query.Type":
		if e.complexity.Query.Type == nil {
			break
		}

		return e.complexity.Query.Type(childComplexity), true

	case "Query.UUID":
		if e.complexity.Query.UUID == nil {
			break
		}

		return e.complexity.Query.UUID(childComplexity), true

	case "Query.UpdateAt":
		if e.complexity.Query.UpdateAt == nil {
			break
		}

		return e.complexity.Query.UpdateAt(childComplexity), true

	case "Query.User":
		if e.complexity.Query.User == nil {
			break
		}

		return e.complexity.Query.User(childComplexity), true

	case "QueryConnection.edges":
		if e.complexity.QueryConnection.Edges == nil {
			break
		}

		return e.complexity.QueryConnection.Edges(childComplexity), true

	case "QueryConnection.pageInfo":
		if e.complexity.QueryConnection.PageInfo == nil {
			break
		}

		return e.complexity.QueryConnection.PageInfo(childComplexity), true

	case "QueryConnection.totalCount":
		if e.complexity.QueryConnection.TotalCount == nil {
			break
		}

		return e.complexity.QueryConnection.TotalCount(childComplexity), true

	case "QueryEdge.cursor":
		if e.complexity.QueryEdge.Cursor == nil {
			break
		}

		return e.complexity.QueryEdge.Cursor(childComplexity), true

	case "QueryEdge.node":
		if e.complexity.QueryEdge.Node == nil {
			break
		}

		return e.complexity.QueryEdge.Node(childComplexity), true

	case "QueryRoot.avatars":
		if e.complexity.QueryRoot.Avatars == nil {
			break
		}

		return e.complexity.QueryRoot.Avatars(childComplexity), true

	case "QueryRoot.cluster":
		if e.complexity.QueryRoot.Cluster == nil {
			break
		}

		args, err := ec.field_QueryRoot_cluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Cluster(childComplexity, args["id"].(string)), true

	case "QueryRoot.clusterSearch":
		if e.complexity.QueryRoot.ClusterSearch == nil {
			break
		}

		args, err := ec.field_QueryRoot_clusterSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.ClusterSearch(childComplexity, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.clusters":
		if e.complexity.QueryRoot.Clusters == nil {
			break
		}

		args, err := ec.field_QueryRoot_clusters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Clusters(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.cron":
		if e.complexity.QueryRoot.Cron == nil {
			break
		}

		args, err := ec.field_QueryRoot_cron_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Cron(childComplexity, args["id"].(string)), true

	case "QueryRoot.crons":
		if e.complexity.QueryRoot.Crons == nil {
			break
		}

		args, err := ec.field_QueryRoot_crons_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Crons(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.databases":
		if e.complexity.QueryRoot.Databases == nil {
			break
		}

		args, err := ec.field_QueryRoot_databases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Databases(childComplexity, args["ClusterUUID"].(string)), true

	case "QueryRoot.environments":
		if e.complexity.QueryRoot.Environments == nil {
			break
		}

		return e.complexity.QueryRoot.Environments(childComplexity), true

	case "QueryRoot.glossaries":
		if e.complexity.QueryRoot.Glossaries == nil {
			break
		}

		args, err := ec.field_QueryRoot_glossaries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Glossaries(childComplexity, args["groups"].([]string)), true

	case "QueryRoot.logs":
		if e.complexity.QueryRoot.Logs == nil {
			break
		}

		args, err := ec.field_QueryRoot_logs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Logs(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.me":
		if e.complexity.QueryRoot.Me == nil {
			break
		}

		return e.complexity.QueryRoot.Me(childComplexity), true

	case "QueryRoot.metadata":
		if e.complexity.QueryRoot.Metadata == nil {
			break
		}

		args, err := ec.field_QueryRoot_metadata_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Metadata(childComplexity, args["ClusterUUID"].(string), args["database"].(string)), true

	case "QueryRoot.option":
		if e.complexity.QueryRoot.Option == nil {
			break
		}

		args, err := ec.field_QueryRoot_option_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Option(childComplexity, args["id"].(string)), true

	case "QueryRoot.options":
		if e.complexity.QueryRoot.Options == nil {
			break
		}

		return e.complexity.QueryRoot.Options(childComplexity), true

	case "QueryRoot.queries":
		if e.complexity.QueryRoot.Queries == nil {
			break
		}

		args, err := ec.field_QueryRoot_queries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Queries(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.query":
		if e.complexity.QueryRoot.Query == nil {
			break
		}

		args, err := ec.field_QueryRoot_query_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Query(childComplexity, args["id"].(string)), true

	case "QueryRoot.querySearch":
		if e.complexity.QueryRoot.QuerySearch == nil {
			break
		}

		args, err := ec.field_QueryRoot_querySearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.QuerySearch(childComplexity, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.role":
		if e.complexity.QueryRoot.Role == nil {
			break
		}

		args, err := ec.field_QueryRoot_role_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Role(childComplexity, args["id"].(string)), true

	case "QueryRoot.roles":
		if e.complexity.QueryRoot.Roles == nil {
			break
		}

		return e.complexity.QueryRoot.Roles(childComplexity), true

	case "QueryRoot.rule":
		if e.complexity.QueryRoot.Rule == nil {
			break
		}

		args, err := ec.field_QueryRoot_rule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Rule(childComplexity, args["id"].(string)), true

	case "QueryRoot.rules":
		if e.complexity.QueryRoot.Rules == nil {
			break
		}

		return e.complexity.QueryRoot.Rules(childComplexity), true

	case "QueryRoot.statistics":
		if e.complexity.QueryRoot.Statistics == nil {
			break
		}

		args, err := ec.field_QueryRoot_statistics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Statistics(childComplexity, args["Groups"].([]string)), true

	case "QueryRoot.tasks":
		if e.complexity.QueryRoot.Tasks == nil {
			break
		}

		return e.complexity.QueryRoot.Tasks(childComplexity), true

	case "QueryRoot.templates":
		if e.complexity.QueryRoot.Templates == nil {
			break
		}

		return e.complexity.QueryRoot.Templates(childComplexity), true

	case "QueryRoot.testCluster":
		if e.complexity.QueryRoot.TestCluster == nil {
			break
		}

		args, err := ec.field_QueryRoot_testCluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.TestCluster(childComplexity, args["input"].(*models.ValidateConnectionInput)), true

	case "QueryRoot.testRegexp":
		if e.complexity.QueryRoot.TestRegexp == nil {
			break
		}

		args, err := ec.field_QueryRoot_testRegexp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.TestRegexp(childComplexity, args["input"].(*models.ValidatePatternInput)), true

	case "QueryRoot.ticket":
		if e.complexity.QueryRoot.Ticket == nil {
			break
		}

		args, err := ec.field_QueryRoot_ticket_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Ticket(childComplexity, args["id"].(string)), true

	case "QueryRoot.ticketSearch":
		if e.complexity.QueryRoot.TicketSearch == nil {
			break
		}

		args, err := ec.field_QueryRoot_ticketSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.TicketSearch(childComplexity, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.tickets":
		if e.complexity.QueryRoot.Tickets == nil {
			break
		}

		args, err := ec.field_QueryRoot_tickets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Tickets(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.user":
		if e.complexity.QueryRoot.User == nil {
			break
		}

		args, err := ec.field_QueryRoot_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.User(childComplexity, args["id"].(string)), true

	case "QueryRoot.userSearch":
		if e.complexity.QueryRoot.UserSearch == nil {
			break
		}

		args, err := ec.field_QueryRoot_userSearch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.UserSearch(childComplexity, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "QueryRoot.users":
		if e.complexity.QueryRoot.Users == nil {
			break
		}

		args, err := ec.field_QueryRoot_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryRoot.Users(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Role.CreateAt":
		if e.complexity.Role.CreateAt == nil {
			break
		}

		return e.complexity.Role.CreateAt(childComplexity), true

	case "Role.Description":
		if e.complexity.Role.Description == nil {
			break
		}

		return e.complexity.Role.Description(childComplexity), true

	case "Role.Name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.UUID":
		if e.complexity.Role.UUID == nil {
			break
		}

		return e.complexity.Role.UUID(childComplexity), true

	case "Role.UpdateAt":
		if e.complexity.Role.UpdateAt == nil {
			break
		}

		return e.complexity.Role.UpdateAt(childComplexity), true

	case "Role.Users":
		if e.complexity.Role.Users == nil {
			break
		}

		args, err := ec.field_Role_Users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Role.Users(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Rule.Bitwise":
		if e.complexity.Rule.Bitwise == nil {
			break
		}

		return e.complexity.Rule.Bitwise(childComplexity), true

	case "Rule.CreateAt":
		if e.complexity.Rule.CreateAt == nil {
			break
		}

		return e.complexity.Rule.CreateAt(childComplexity), true

	case "Rule.Description":
		if e.complexity.Rule.Description == nil {
			break
		}

		return e.complexity.Rule.Description(childComplexity), true

	case "Rule.Element":
		if e.complexity.Rule.Element == nil {
			break
		}

		return e.complexity.Rule.Element(childComplexity), true

	case "Rule.Func":
		if e.complexity.Rule.Func == nil {
			break
		}

		return e.complexity.Rule.Func(childComplexity), true

	case "Rule.Group":
		if e.complexity.Rule.Group == nil {
			break
		}

		return e.complexity.Rule.Group(childComplexity), true

	case "Rule.Message":
		if e.complexity.Rule.Message == nil {
			break
		}

		return e.complexity.Rule.Message(childComplexity), true

	case "Rule.Name":
		if e.complexity.Rule.Name == nil {
			break
		}

		return e.complexity.Rule.Name(childComplexity), true

	case "Rule.UUID":
		if e.complexity.Rule.UUID == nil {
			break
		}

		return e.complexity.Rule.UUID(childComplexity), true

	case "Rule.UpdateAt":
		if e.complexity.Rule.UpdateAt == nil {
			break
		}

		return e.complexity.Rule.UpdateAt(childComplexity), true

	case "Rule.Values":
		if e.complexity.Rule.Values == nil {
			break
		}

		return e.complexity.Rule.Values(childComplexity), true

	case "Rule.VldrGroup":
		if e.complexity.Rule.VldrGroup == nil {
			break
		}

		return e.complexity.Rule.VldrGroup(childComplexity), true

	case "Statement.Content":
		if e.complexity.Statement.Content == nil {
			break
		}

		return e.complexity.Statement.Content(childComplexity), true

	case "Statement.CreateAt":
		if e.complexity.Statement.CreateAt == nil {
			break
		}

		return e.complexity.Statement.CreateAt(childComplexity), true

	case "Statement.Plan":
		if e.complexity.Statement.Plan == nil {
			break
		}

		return e.complexity.Statement.Plan(childComplexity), true

	case "Statement.Report":
		if e.complexity.Statement.Report == nil {
			break
		}

		return e.complexity.Statement.Report(childComplexity), true

	case "Statement.RowsAffected":
		if e.complexity.Statement.RowsAffected == nil {
			break
		}

		return e.complexity.Statement.RowsAffected(childComplexity), true

	case "Statement.Sequence":
		if e.complexity.Statement.Sequence == nil {
			break
		}

		return e.complexity.Statement.Sequence(childComplexity), true

	case "Statement.Status":
		if e.complexity.Statement.Status == nil {
			break
		}

		return e.complexity.Statement.Status(childComplexity), true

	case "Statement.Ticket":
		if e.complexity.Statement.Ticket == nil {
			break
		}

		return e.complexity.Statement.Ticket(childComplexity), true

	case "Statement.TypeDesc":
		if e.complexity.Statement.TypeDesc == nil {
			break
		}

		return e.complexity.Statement.TypeDesc(childComplexity), true

	case "Statement.UUID":
		if e.complexity.Statement.UUID == nil {
			break
		}

		return e.complexity.Statement.UUID(childComplexity), true

	case "Statement.UpdateAt":
		if e.complexity.Statement.UpdateAt == nil {
			break
		}

		return e.complexity.Statement.UpdateAt(childComplexity), true

	case "StatementConnection.edges":
		if e.complexity.StatementConnection.Edges == nil {
			break
		}

		return e.complexity.StatementConnection.Edges(childComplexity), true

	case "StatementConnection.pageInfo":
		if e.complexity.StatementConnection.PageInfo == nil {
			break
		}

		return e.complexity.StatementConnection.PageInfo(childComplexity), true

	case "StatementConnection.totalCount":
		if e.complexity.StatementConnection.TotalCount == nil {
			break
		}

		return e.complexity.StatementConnection.TotalCount(childComplexity), true

	case "StatementEdge.cursor":
		if e.complexity.StatementEdge.Cursor == nil {
			break
		}

		return e.complexity.StatementEdge.Cursor(childComplexity), true

	case "StatementEdge.node":
		if e.complexity.StatementEdge.Node == nil {
			break
		}

		return e.complexity.StatementEdge.Node(childComplexity), true

	case "Statistic.CreateAt":
		if e.complexity.Statistic.CreateAt == nil {
			break
		}

		return e.complexity.Statistic.CreateAt(childComplexity), true

	case "Statistic.Group":
		if e.complexity.Statistic.Group == nil {
			break
		}

		return e.complexity.Statistic.Group(childComplexity), true

	case "Statistic.Key":
		if e.complexity.Statistic.Key == nil {
			break
		}

		return e.complexity.Statistic.Key(childComplexity), true

	case "Statistic.UUID":
		if e.complexity.Statistic.UUID == nil {
			break
		}

		return e.complexity.Statistic.UUID(childComplexity), true

	case "Statistic.UpdateAt":
		if e.complexity.Statistic.UpdateAt == nil {
			break
		}

		return e.complexity.Statistic.UpdateAt(childComplexity), true

	case "Statistic.Value":
		if e.complexity.Statistic.Value == nil {
			break
		}

		return e.complexity.Statistic.Value(childComplexity), true

	case "SubscriptionRoot.ticketStatusChanged":
		if e.complexity.SubscriptionRoot.TicketStatusChanged == nil {
			break
		}

		return e.complexity.SubscriptionRoot.TicketStatusChanged(childComplexity), true

	case "Template.Body":
		if e.complexity.Template.Body == nil {
			break
		}

		return e.complexity.Template.Body(childComplexity), true

	case "Template.CreateAt":
		if e.complexity.Template.CreateAt == nil {
			break
		}

		return e.complexity.Template.CreateAt(childComplexity), true

	case "Template.Description":
		if e.complexity.Template.Description == nil {
			break
		}

		return e.complexity.Template.Description(childComplexity), true

	case "Template.Subject":
		if e.complexity.Template.Subject == nil {
			break
		}

		return e.complexity.Template.Subject(childComplexity), true

	case "Template.UUID":
		if e.complexity.Template.UUID == nil {
			break
		}

		return e.complexity.Template.UUID(childComplexity), true

	case "Template.UpdateAt":
		if e.complexity.Template.UpdateAt == nil {
			break
		}

		return e.complexity.Template.UpdateAt(childComplexity), true

	case "Ticket.Cluster":
		if e.complexity.Ticket.Cluster == nil {
			break
		}

		return e.complexity.Ticket.Cluster(childComplexity), true

	case "Ticket.Comments":
		if e.complexity.Ticket.Comments == nil {
			break
		}

		args, err := ec.field_Ticket_Comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Ticket.Comments(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Ticket.Content":
		if e.complexity.Ticket.Content == nil {
			break
		}

		return e.complexity.Ticket.Content(childComplexity), true

	case "Ticket.CreateAt":
		if e.complexity.Ticket.CreateAt == nil {
			break
		}

		return e.complexity.Ticket.CreateAt(childComplexity), true

	case "Ticket.Cron":
		if e.complexity.Ticket.Cron == nil {
			break
		}

		return e.complexity.Ticket.Cron(childComplexity), true

	case "Ticket.Database":
		if e.complexity.Ticket.Database == nil {
			break
		}

		return e.complexity.Ticket.Database(childComplexity), true

	case "Ticket.Reviewer":
		if e.complexity.Ticket.Reviewer == nil {
			break
		}

		return e.complexity.Ticket.Reviewer(childComplexity), true

	case "Ticket.Statements":
		if e.complexity.Ticket.Statements == nil {
			break
		}

		args, err := ec.field_Ticket_Statements_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Ticket.Statements(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "Ticket.Status":
		if e.complexity.Ticket.Status == nil {
			break
		}

		return e.complexity.Ticket.Status(childComplexity), true

	case "Ticket.Subject":
		if e.complexity.Ticket.Subject == nil {
			break
		}

		return e.complexity.Ticket.Subject(childComplexity), true

	case "Ticket.UUID":
		if e.complexity.Ticket.UUID == nil {
			break
		}

		return e.complexity.Ticket.UUID(childComplexity), true

	case "Ticket.UpdateAt":
		if e.complexity.Ticket.UpdateAt == nil {
			break
		}

		return e.complexity.Ticket.UpdateAt(childComplexity), true

	case "Ticket.User":
		if e.complexity.Ticket.User == nil {
			break
		}

		return e.complexity.Ticket.User(childComplexity), true

	case "TicketConnection.edges":
		if e.complexity.TicketConnection.Edges == nil {
			break
		}

		return e.complexity.TicketConnection.Edges(childComplexity), true

	case "TicketConnection.pageInfo":
		if e.complexity.TicketConnection.PageInfo == nil {
			break
		}

		return e.complexity.TicketConnection.PageInfo(childComplexity), true

	case "TicketConnection.totalCount":
		if e.complexity.TicketConnection.TotalCount == nil {
			break
		}

		return e.complexity.TicketConnection.TotalCount(childComplexity), true

	case "TicketEdge.cursor":
		if e.complexity.TicketEdge.Cursor == nil {
			break
		}

		return e.complexity.TicketEdge.Cursor(childComplexity), true

	case "TicketEdge.node":
		if e.complexity.TicketEdge.Node == nil {
			break
		}

		return e.complexity.TicketEdge.Node(childComplexity), true

	case "TicketStatusChangePayload.Message":
		if e.complexity.TicketStatusChangePayload.Message == nil {
			break
		}

		return e.complexity.TicketStatusChangePayload.Message(childComplexity), true

	case "TicketStatusChangePayload.TicketUUID":
		if e.complexity.TicketStatusChangePayload.TicketUUID == nil {
			break
		}

		return e.complexity.TicketStatusChangePayload.TicketUUID(childComplexity), true

	case "User.Avatar":
		if e.complexity.User.Avatar == nil {
			break
		}

		return e.complexity.User.Avatar(childComplexity), true

	case "User.Clusters":
		if e.complexity.User.Clusters == nil {
			break
		}

		args, err := ec.field_User_Clusters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Clusters(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "User.CreateAt":
		if e.complexity.User.CreateAt == nil {
			break
		}

		return e.complexity.User.CreateAt(childComplexity), true

	case "User.Email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.Name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.Phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.Queries":
		if e.complexity.User.Queries == nil {
			break
		}

		args, err := ec.field_User_Queries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Queries(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "User.Reviewers":
		if e.complexity.User.Reviewers == nil {
			break
		}

		return e.complexity.User.Reviewers(childComplexity), true

	case "User.Roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "User.Statistics":
		if e.complexity.User.Statistics == nil {
			break
		}

		return e.complexity.User.Statistics(childComplexity), true

	case "User.Status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.Tickets":
		if e.complexity.User.Tickets == nil {
			break
		}

		args, err := ec.field_User_Tickets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Tickets(childComplexity, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int)), true

	case "User.UUID":
		if e.complexity.User.UUID == nil {
			break
		}

		return e.complexity.User.UUID(childComplexity), true

	case "User.UpdateAt":
		if e.complexity.User.UpdateAt == nil {
			break
		}

		return e.complexity.User.UpdateAt(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._QueryRoot(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._MutationRoot(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	next := ec._SubscriptionRoot(ctx, op.SelectionSet)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		if buf == nil {
			return nil
		}

		return &graphql.Response{
			Data:       buf,
			Errors:     ec.Errors,
			Extensions: ec.Extensions,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	rctx := graphql.GetResolverContext(ctx)
	for _, d := range rctx.Field.Definition.Directives {
		switch d.Name {
		case "auth":
			if ec.directives.Auth != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_auth_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Auth(ctx, obj, n, args["requires"].([]RoleEnum))
				}
			}
		case "date":
			if ec.directives.Date != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_date_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Date(ctx, obj, n, args["format"].(string))
				}
			}
		case "enumInt":
			if ec.directives.EnumInt != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_enumInt_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.EnumInt(ctx, obj, n, args["value"].(int))
				}
			}
		case "length":
			if ec.directives.Length != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_length_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Length(ctx, obj, n, args["max"].(int))
				}
			}
		case "lower":
			if ec.directives.Lower != nil {
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Lower(ctx, obj, n)
				}
			}
		case "matches":
			if ec.directives.Matches != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_matches_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Matches(ctx, obj, n, args["pattern"].(string))
				}
			}
		case "range":
			if ec.directives.Range != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_range_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Range(ctx, obj, n, args["begin"].(int), args["end"].(int))
				}
			}
		case "rename":
			if ec.directives.Rename != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_rename_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Rename(ctx, obj, n, args["to"].(string))
				}
			}
		case "timestamp":
			if ec.directives.Timestamp != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_timestamp_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Timestamp(ctx, obj, n, args["format"].(string))
				}
			}
		case "trim":
			if ec.directives.Trim != nil {
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Trim(ctx, obj, n)
				}
			}
		case "upper":
			if ec.directives.Upper != nil {
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Upper(ctx, obj, n)
				}
			}
		case "uuid":
			if ec.directives.Uuid != nil {
				rawArgs := d.ArgumentMap(ec.Variables)
				args, err := ec.dir_uuid_args(ctx, rawArgs)
				if err != nil {
					ec.Error(ctx, err)
					return nil
				}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Uuid(ctx, obj, n, args["name"].(*string), args["from"].([]*string))
				}
			}
		}
	}
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "gqlapi/schema.graphql", Input: `# 人口

"""
系统入口
"""
schema {
	query:        QueryRoot
	mutation:     MutationRoot
	subscription: SubscriptionRoot
}

# Directive定义

"""
用户权限管理
"""
directive @auth(
	"""
	权限要求
	"""
	requires: [RoleEnum!]!
) on QUERY | MUTATION | FIELD_DEFINITION | SUBSCRIPTION

"""
把GraphQL中定义的Enum的枚举值从String类型适配到Int类型
"""
directive @enumInt(
	"""
	枚举值对应的整数值
	"""
	value: Int!
) on ENUM_VALUE

"""
把源字符串转成大写
"""
directive @upper on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
把源字符串转成小写
"""
directive @lower on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
把UNIX_TIMESTAMP转化成日期时间字符串
"""
directive @timestamp(
	"""
	日期格式
	"""
	format: String! = "yyyy-MM-dd"
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
把普通字段用md5算法转成UUID
"""
directive @uuid(
	# 新生成的属性名称，默认UUID
	name: String = "UUID"
	# 计算UUID属性相关的属性
	from: [String] = ["id"]
) on OBJECT

"""
日期格式转换
"""
directive @date(
	"""
	日期格式
	"""
	format: String! = "yyyy-MM-dd"
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
字符串长度限制
"""
directive @length(
	"""
	允许的最大长度
	"""
	max: Int!
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
数字范围限制
"""
directive @range(
	"""
	最小值
	"""
	begin: Int!,
	"""
	最大值
	"""
	end: Int!
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
字符串正则匹配限制
"""
directive @matches(
	"""
	需要匹配的正则表达式
	"""
	pattern: String!
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
字符串去首尾空格
"""
directive @trim on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
属性改名
"""
directive @rename(
	"""
	输入字符串
	"""
	to: String!
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

union Searchable = User | Ticket | Cluster

# 枚举定义

"""
关联表类型描述
"""
enum EdgeEnum {
	"""
	用户到审核的多对多关系
	"""
	USER_TO_REVIEWER @enumInt(value: 1)

	"""
	用户到角色的多对多关系
	"""
	USER_TO_ROLE     @enumInt(value: 2)

	"""
	用户到群集的多对多关系
	"""
	USER_TO_CLUSTER  @enumInt(value: 3)
}

"""
SQL语句抽象语法树类型枚举
"""
enum StatementTypeEnum {
	ALTER_TABLE     @enumInt(value: 1)
	ANALYZE_TABLE   @enumInt(value: 2)
	BEGIN           @enumInt(value: 3)
	COMMIT          @enumInt(value: 4)
	CREATE_DATABASE @enumInt(value: 5)
	CREATE_INDEX    @enumInt(value: 6)
	CREATE_TABLE    @enumInt(value: 7)
	CREATE_VIEW     @enumInt(value: 8)
	CREATE_USER     @enumInt(value: 9)
	DELETE          @enumInt(value: 10)
	DROP_DATABASE   @enumInt(value: 11)
	DROP_INDEX      @enumInt(value: 12)
	DROP_TABLE      @enumInt(value: 13)
	EXPLAIN         @enumInt(value: 14)
	INSERT          @enumInt(value: 15)
	LOAD_DATA       @enumInt(value: 16)
	ROLLBACK        @enumInt(value: 17)
	SELECT          @enumInt(value: 18)
	SET             @enumInt(value: 19)
	SHOW            @enumInt(value: 20)
	TRUNCATE_TABLE  @enumInt(value: 21)
	UPDATE          @enumInt(value: 22)
	GRANT           @enumInt(value: 23)
	REVOKE          @enumInt(value: 24)
	DEALLOCATE      @enumInt(value: 25)
	EXECUTE         @enumInt(value: 26)
	PREPARE         @enumInt(value: 27)
	USE             @enumInt(value: 28)
}

"""
角色定义
"""
enum RoleEnum {
	"""
	管理员
	"""
	ADMIN     @enumInt(value: 1)
	"""
	工单审核人
	"""
	REVIEWER  @enumInt(value: 2)
	"""
	开发者
	"""
	DEVELOPER @enumInt(value: 3)
	"""
	普通用户
	"""
	USER      @enumInt(value: 4)
	"""
	访客
	"""
	GUEST     @enumInt(value: 5)
}

"""
性别定义
"""
enum GenderEnum {
	"""
	无
	"""
	NA     @enumInt(value: -1)
	"""
	男
	"""
	MALE   @enumInt(value: 1)
	"""
	女
	"""
	FEMALE @enumInt(value: 0)
}

# 工单保存成功，等待系统审核
#   => 系统审核不通过，需要修改后重新提交 -> ... 提交人编辑 -> 重新走流程
#   => 系统审核有警告
#   => 系统审核通过，等待人工审核
#     => 人工审核不通过，需要重修修改后提交 -> ... 提交人编辑 -> 重新走流程
#     => 人工审核有问题，等待协商解决
#     => 人工审核通过，等待上线执行
#       => 上线执行完成，订单关闭
#       => 上线执行失败，请转到工单详情进一步了解
enum TicketStatusEnum {
	"""
	工单保存成功，等待系统审核
	"""
	WAITING_FOR_VLD  @enumInt(value: 1)

	"""
	系统审核不通过，一条或者多条语句违反规则限制，需要修改后重新提交
	"""
	VLD_FAILURE      @enumInt(value: 2)

	"""
	系统审核不通过，但部分或全部语句存在警告
	"""
	VLD_WARNING      @enumInt(value: 3)

	"""
	系统审核通过，等待人工审核
	"""
	WAITING_FOR_MRV  @enumInt(value: 4)

	"""
	人工审核不通过，需要修改后重新提交
	"""
	MRV_FAILURE      @enumInt(value: 5)

	"""
	人工审核通过，等待上线执行
	"""
	LGTM             @enumInt(value: 6)

	"""
	上线执行完成
	"""
	DONE             @enumInt(value: 7)

	"""
	上线执行失败，部分或全部未执行
	"""
	EXEC_FAILURE     @enumInt(value: 8)

	"""
	发起人主动关闭不需要执行
	"""
	CLOSED           @enumInt(value: 9)
}

enum UserStatusEnum {
	"""
	正常
	"""
	NORMAL  @enumInt(value: 1)

	"""
	禁用
	"""
	BLOCKED @enumInt(value: 2)

	"""
	等待管理员审核
	"""
	PENDING @enumInt(value: 3)
}

enum ClusterStatusEnum {
	"""
	正常
	"""
	NORMAL   @enumInt(value: 1)

	"""
	禁用
	"""
	DISABLED @enumInt(value: 2)
}

enum QueryTypeEnum {
	"""
	数据查询
	"""
	QUERY

	"""
	查询分析
	"""
	ANALYZE

	"""
	查询重写
	"""
	REWRITE
}

"""
接口定义
"""
interface Node {
	"""
	创建时间
	"""
	CreateAt: UInt!
	"""
	最后一次修改时间
	"""
	UpdateAt: UInt
}

"""
翻页信息
"""
type PageInfo {
	"""
	是否可以向前翻页
	"""
	hasNextPage:     Boolean!

	"""
	是否可以向后翻页
	"""
	hasPreviousPage: Boolean!

	"""
	向前翻页时的光标
	"""
	startCursor:     ID!

	"""
	向后翻页时的光标
	"""
	endCursor:       ID!
}

type Avatar implements Node {
	"""
	头像UUID
	"""
	UUID:     ID!

	"""
	头像地址
	"""
	URL:      String! @length(max: 100)

	"""
	记录创建时间
	"""
	CreateAt: UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt: UInt
}

"""
计划任务信息
"""
type Cron implements Node {
	"""
	计划任务UUID
	"""
	UUID:      ID!

	"""
	名称
	"""
	Name:      String! @length(max: 100)

	"""
	外部命令
	"""
	Cmd:      String!

	"""
	执行参数
	"""
	Params:    String

	"""
	执行间隔
	"""
	Interval:  String

	"""
	执行耗时
	"""
	Duration:  String

	"""
	最后一次执行时间
	"""
	LastRun:   String

	"""
	下一次执行时间
	"""
	NextRun:   String

	"""
	是否周期性
	"""
	Recurrent: UInt8!

	"""
	执行状态
	"""
	Status: String!

	"""
	记录创建时间
	"""
	CreateAt:  UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt:  UInt
}

type CronConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!

	"""
	记录信息
	"""
	edges:      [CronEdge!]

	"""
	记录总数
	"""
	totalCount: Int!
}

type CronEdge {
	"""
	端
	"""
	node:   Cron

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
审核意见建议说明
"""
type Comment implements Node {
	"""
	意见UUID
	"""
	UUID:    ID!

	"""
	具体内容
	"""
	Content:  String! @length(max: 255)

	"""
	发起人
	"""
	User:     User!

	"""
	关联的工单
	"""
	Ticket:   Ticket!

	"""
	记录创建时间
	"""
	CreateAt: UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt: UInt
}

type CommentConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!

	"""
	记录信息
	"""
	edges:      [CommentEdge!]

	"""
	记录总数
	"""
	totalCount: Int!
}

type CommentEdge {
	"""
	端
	"""
	node:   Comment

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
数据字典
"""
type Glossary implements Node {
	"""
	词条的UUID
	"""
	UUID:        ID!

	"""
	词条分组
	"""
	Group:       String! @length(max: 50)

	"""
	词条数字取值
	"""
	Key:         UInt!    @range(begin: 1, end: 255)

	"""
	词条的名称
	"""
	Value:       String! @length(max: 75)

	"""
	词条的描述
	"""
	Description: String! @length(max: 255)

	"""
	记录创建时间
	"""
	CreateAt:    UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt:    UInt
}

"""
群集，此处仅处理主服务器
"""
type Cluster implements Node {
	"""
	群集的UUID
	"""
	UUID:     ID!

	"""
	群集的主机名称，唯一
	"""
	Host:     String! @length(max: 75)

	"""
	群集的主机别名，唯一
	"""
	Alias:    String! @length(max: 75)

	"""
	群集的IP地址，唯一，默认使用IP地址进行连接
	"""
	IP:       String! @matches(pattern: "^(\\d{1,3}\\.){3}\\d{1,3}$")

	"""
	群集的端口号
	"""
	Port:     UInt16! @range(begin: 0, end: 65535)

	"""
	群集连接的用户名
	"""
	User:     String! @length(max: 75)

	"""
	群集的状态
	"""
	Status:   UInt8!  @range(begin: 0, end: 255) @matches(pattern: "^(1|2)$")

	"""
	记录创建时间
	"""
	CreateAt: UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt: UInt
}

type ClusterConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!

	"""
	记录信息
	"""
	edges:      [ClusterEdge!]

	"""
	记录总数
	"""
	totalCount: Int!
}

type ClusterEdge {
	"""
	端
	"""
	node:   Cluster

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
操作日志
"""
type Log {
	"""
	日志ID
	"""
	UUID:      ID!

	"""
	日志自增ID
	"""
	LogID:     Int!

	"""
	日志关联的用户
	"""
	User:      User!

	"""
	日志内容
	"""
	Operation: String!

	"""
	日志记录的时间
	"""
	CreateAt:  UInt!
}

type LogConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!

	"""
	记录信息
	"""
	edges:      [LogEdge!]

	"""
	记录总数
	"""
	totalCount: Int!
}

type LogEdge {
	"""
	端
	"""
	node:   Log

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
系统选项
"""
type Option implements Node {
	"""
	系统选项的UUID
	"""
	UUID:        ID!

	"""
	系统选项的名称
	"""
	Name:        String! @length(max: 50)

	"""
	系统选项的当前取值
	"""
	Value:       String! @length(max: 75)

	"""
	分别是：0 - 只读 和 1 - 读写。
	"""
	Writable:    UInt8!  @range(begin: 0, end: 255) @matches(pattern: "^(0|1)$")

	"""
	系统选项的描述，用于页面展示
	"""
	Description: String! @length(max: 75)

	"""
	页面展示时使用的控件类型
	"""
	Element:     String! @length(max: 75)

	"""
	记录创建时间
	"""
	CreateAt:    UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt:    UInt
}

"""
历史数据查询
"""
type Query implements Node {
	"""
	数据查询的UUID
	"""
	UUID:     ID!

	"""
	查询类型
	"""
	Type:    UInt8!

	"""
	数据查询的管理群集
	"""
	Cluster: Cluster!

	"""
	数据查询的具体数据库
	"""
	Database: String! @length(max: 75)

	"""
	数据查询使用的具体语句
	"""
	Content:  String! @length(max: 65535)

	"""
	数据查询的执行计划
	"""
	Plan:     String! @length(max: 65535)

	"""
	数据查询的发起人
	"""
	User:     User!

	"""
	记录创建时间
	"""
	CreateAt: UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt: UInt
}

type QueryConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!

	"""
	记录信息
	"""
	edges:      [QueryEdge!]

	"""
	记录总数
	"""
	totalCount: Int!
}

type QueryEdge {
	"""
	端
	"""
	node:   Query

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
系统角色
"""
type Role implements Node {
	"""
	角色的UUID
	"""
	UUID:        ID!

	"""
	角色的名字
	"""
	Name:        String! @length(max: 75)

	"""
	角色的描述
	"""
	Description: String! @length(max: 75)

	"""
	角色关联的用户
	"""
	Users(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): UserConnection

	"""
	记录创建时间
	"""
	CreateAt:    UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt:    UInt
}

"""
审核规则
"""
type Rule implements Node {
	"""
	规则UUID
	"""
	UUID:        ID!

	"""
	规则名称，此处是一个编码
	"""
	Name:        String!  @length(max: 75)

	"""
	规则分组
	"""
	Group:       UInt8!   @range(begin: 1, end: 255)

	"""
	规则描述，用于界面展示
	"""
	Description: String!  @length(max: 75)

	"""
	规则的严重级别，分别是警告和错误，警告可以被忽略进而审核执行，错误则必须修正之后才可以被审核执行
	"""
	VldrGroup:    UInt16!   @range(begin: 1000, end: 9999) @matches(pattern: "^(\\d{4})$")

	"""
	规则当前的设定值，部分规则需要，比如允许的存储引擎
	"""
	Values:      String!  @length(max: 75)

	"""
	用低三位表达规则的状态，分别是：读/写/执行，默认高位永远是1。
	"""
	Bitwise:     UInt8!   @range(begin: 0, end: 255) @matches(pattern: "^(4|5|6|7)$")

	"""
	规则对应的处理函数
	"""
	Func:        String!  @length(max: 75)

	"""
	规则验证不通过时，需要给出的提示信息，可能带有占位符
	"""
	Message:     String!  @length(max: 75)

	"""
	界面展示使用的控件及参数
	"""
	Element:     String!  @length(max: 75)

	"""
	记录创建时间
	"""
	CreateAt:    UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt:    UInt
}

type CPUStats {
	User:      Float!
	Kernel:    Float!
	Idle:      Float!
	IOWait:    Float!
	Swap:      Float!
	Nice:      Float!
	LoadMin1:  Float!
	LoadMin5:  Float!
	LoadMin15: Float!
#	Period time.Duration
#	TimeTaken time.Time
}

type HostInfos {
	OSName:    String!
	OSRelease: String!
	OSVersion: String!
	Platform:  String!
	HostName:  String!
	NCPUs:     Int!
	MaxCPUs:   Int!
	BitWidth:  Int!
#	uptime    time.Time
#	systime   time.Time
}

type ProcessStats {
	"""
	The total number of processes
	"""
	Total:    Int!

	"""
	The number of running processes
	"""
	Running:  Int!

	"""
	The number of sleeping processes
	"""
	Sleeping: Int!

	"""
	The number of stopped processes
	"""
	Stopped:  Int!

	"""
	The number of zombie processes
	"""
	Zombie:   Int!
}

type MemStats {
	"""
	The total amount of real memory in bytes
	"""
	Total:     Int!

	"""
	Theount of real memory in bytes.
	"""
	Free:      Int!

	"""
	The used amount of real memory in bytes
	"""
	Used:      Int!

	"""
	The amount of real memory in bytes used for caching
	"""
	Cache:     Int!

	"""
	The total swap space in bytes.
	"""
	SwapTotal: Int!

	"""
	The used swap in bytes
	"""
	SwapUsed:  Int!

	"""
	The free swap in bytes
	"""
	SwapFree:  Int!
}

type Environments {
	CPUStats:     CPUStats!
	HostInfos:    HostInfos!
	ProcessStats: ProcessStats!
	MemStats:     MemStats!
}

"""
工单分解后的语句集
"""
type Statement implements Node {
	"""
	语句的UUID
	"""
	UUID:         ID!

	"""
	语句的顺序ID
	"""
	Sequence:     UInt16!  @range(begin: 1, end: 65535)

	"""
	语句的具体内容
	"""
	Content:      String! @length(max: 65535)

	"""
	语句的类型，这个有抽象语法树决定
	"""
	TypeDesc:     String!

	"""
	语句的审核状态
	"""
	Status:       UInt8!  @range(begin: 1, end: 255)

	"""
	语句分析报告
	"""
	Report:       String  @length(max: 65535)

	"""
	DML语句的执行计划
	"""
	Plan:         String

	"""
	语句关联的工单
	"""
	Ticket:       Ticket!

	"""
	在服务器正确执行后影响的行数
	"""
	RowsAffected: UInt

	"""
	记录创建时间
	"""
	CreateAt:     UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt:     UInt
}

type StatementConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!

	"""
	记录信息
	"""
	edges:      [StatementEdge!]

	"""
	记录总数
	"""
	totalCount: Int!
}

type StatementEdge {
	"""
	端
	"""
	node:   Statement

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
系统统计信息
"""
type Statistic implements Node {
	"""
	统计的UUID
	"""
	UUID:     ID!

	"""
	分组
	"""
	Group:    String!

	"""
	统计的名称
	"""
	Key:      String! @length(max: 50)

	"""
	统计的值
	"""
	Value:    Float!

	"""
	记录创建时间
	"""
	CreateAt: UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt: UInt
}


"""
邮件模板
"""
type Template implements Node {
	"""
	邮件模板的UUID
	"""
	UUID:     ID!

	"""
	邮件主题
	"""
	Subject:  String!

	"""
	邮件正文
	"""
	Body:     String!

	"""
	主题说明
	"""
	Description:  String!

	"""
	记录创建时间
	"""
	CreateAt: UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt: UInt
}

"""
变更工单
"""
type Ticket implements Node {
	"""
	变更工单的UUID
	"""
	UUID:     ID!

	"""
	变更工单需要应用到的群集
	"""
	Cluster: Cluster!

	"""
	变更工单需要应用到的数据库
	"""
	Database: String! @length(max: 75)

	"""
	变更工单的主题
	"""
	Subject:  String! @length(max: 75)

	"""
	变更工单的内容
	"""
	Content:  String! @length(max: 65535)

	"""
	变更工单的审核状态
	"""
	Status:   UInt8!  @range(begin: 1, end: 255)

	"""
	变更工单的发起人
	"""
	User:     User!

	"""
	变更工单的审核人
	"""
	Reviewer: User!

	"""
	执行预约信息
	"""
	Cron:     Cron

	"""
	变更工单的关联分解的语句
	"""
	Statements(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): StatementConnection!

	"""
	变更工单的审核意见建议
	"""
	Comments(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	):   CommentConnection

	"""
	记录创建时间
	"""
	CreateAt: UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt: UInt
}

type TicketConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!
	"""
	记录信息
	"""
	edges:      [TicketEdge!]
	"""
	记录总数
	"""
	totalCount: Int!
}

type TicketEdge {
	"""
	端
	"""
	node:   Ticket

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
用户信息
"""
type User implements Node {
	"""
	用户的UUID
	"""
	UUID:       ID!

	"""
	用户的电子邮件地址，用于登录
	"""
	Email:      String! @length(max: 75)

	"""
	用户的当前状态
	"""
	Status:     UInt8!  @range(begin: 1, end: 255) @matches(pattern: "^(1|2|3)$")

	"""
	用户的真实姓名
	"""
	Name:       String  @length(max: 10)

	"""
	用户电话号码
	"""
	Phone:      UInt64

	"""
	用户的头像
	"""
	Avatar:     Avatar!

	"""
	用户关联的角色
	"""
	Roles:      [Role]

	"""
	用户的关联审核人
	"""
	Reviewers:  [User]

	"""
	用户维度的统计信息
	"""
	Statistics: [Statistic]

	"""
	用户的关联群集
	"""
	Clusters(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): ClusterConnection

	"""
	用户的关联工单
	"""
	Tickets(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	):   TicketConnection

	"""
	用户的关联查询
	"""
	Queries(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	):   QueryConnection

	"""
	记录创建时间
	"""
	CreateAt:   UInt!

	"""
	记录最近一次修改时间
	"""
	UpdateAt:   UInt
}

"""
用户连接定义
"""
type UserConnection {
	"""
	分页信息
	"""
	pageInfo:   PageInfo!

	"""
	记录信息
	"""
	edges:      [UserEdge!]

	"""
	记录总数
	"""
	totalCount: Int!
}

"""
连接中用户的端
"""
type UserEdge {
	"""
	端
	"""
	node:   User

	"""
	分页时使用的光标
	"""
	cursor: ID!
}

"""
用户登录后返回当前用户信息和令牌
"""
type LoginPayload {
	"""
	用户信息
	"""
	Me:    User!

	"""
	登录令牌
	"""
	Token: String!
}

"""
数据库信息
"""
type Database {
	"""
	名称
	"""
	Name:    String!

	"""
	字符集
	"""
	Charset: String!

	"""
	排序规则
	"""
	Collate: String!
}

"""
数据查询入口
"""
type QueryRoot {
	"""
	根据群集编码查看群集记录
	"""
	cluster (
		"""
		群集编码
		"""
		id: ID!
	): Cluster @auth(requires: [USER, ADMIN])

	"""
	浏览所有群集记录
	"""
	clusters (
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): ClusterConnection @auth(requires: [ADMIN])

	"""
	群集记录查找
	"""
	clusterSearch (
		"""
		Lucene查询语法
		"""
		search: String!

		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): ClusterConnection @auth(requires: [ADMIN])

	"""
	浏览所有操作日志
	"""
	logs (
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): LogConnection @auth(requires: [ADMIN])

	"""
	当前登录用户信息
	"""
	me: User! @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	浏览所有系统选项
	"""
	options: [Option] @auth(requires: [ADMIN])

	"""
	查看某一个系统选项
	"""
	option(
		"""
		检索编码
		"""
		id: ID!
	): Option

	"""
	根据检索编码查看检索记录
	"""
	query (
		"""
		检索编码
		"""
		id: ID!
	): Query @auth(requires: [DEVELOPER])

	"""
	浏览所有检索记录
	"""
	queries (
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): QueryConnection @auth(requires: [DEVELOPER, ADMIN])

	"""
	检索记录查找
	"""
	querySearch (
		"""
		Lucene查询语法
		"""
		search: String!

		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): QueryConnection @auth(requires: [DEVELOPER, ADMIN])

	"""
	查看所有的邮件模板
	"""
	templates: [Template] @auth(requires: [ADMIN])

	"""
	根据工单编码查看工单记录
	"""
	ticket (
		"""
		工单编码
		"""
		id: ID!
	): Ticket @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	浏览所有工单记录
	"""
	tickets (
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): TicketConnection @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	工单记录查找
	"""
	ticketSearch (
		"""
		Lucene查询语法
		"""
		search: String!

		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): TicketConnection @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	根据用户编码查看用户记录
	"""
	user(
		"""
		用户编码
		"""
		id: ID!
	): User @auth(requires: [ADMIN])

	"""
	浏览所有用户记录
	"""
	users (
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): UserConnection @auth(requires: [ADMIN])

	"""
	用户记录查找
	"""
	userSearch (
		"""
		Lucene查询语法
		"""
		search: String!

		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): UserConnection @auth(requires: [ADMIN])

	"""
	返回所有的用户头像列表
	"""
	avatars: [Avatar] @auth(requires: [GUEST, USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	返回某一指定的规则信息
	"""
	rule(
		"""
		规则UUID
		"""
		id: ID!
	):Rule @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	返回所有的规则列表
	"""
	rules: [Rule] @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	返回某一指定的角色信息
	"""
	role(
		"""
		角色UUID
		"""
		id: ID!
	):Role @auth(requires: [GUEST, USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	返回所有的角色信息
	"""
	roles: [Role] @auth(requires: [GUEST, USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	根据类别返回全部的字典信息
	"""
	glossaries (
		"""
		字典类别列表
		"""
		groups: [String!]!
	): [Glossary] @auth(requires: [GUEST, USER, DEVELOPER, REVIEWER, ADMIN])

	cron (
		id: ID!
	): Cron @auth(requires: [DEVELOPER, REVIEWER, ADMIN])

	"""
	浏览所有计划任务
	"""
	crons (
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: String

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: String

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): CronConnection @auth(requires: [DEVELOPER, REVIEWER, ADMIN])

	"""
	查看等待执行的任务列表
	"""
	tasks: [Cron] @auth(requires: [DEVELOPER, REVIEWER, ADMIN])

	"""
	查看群集上的数据库列表
	"""
	databases(
		"""
		群集的UUID
		"""
		ClusterUUID: String!
	): [Database!] @auth(requires: [DEVELOPER, REVIEWER, ADMIN])

	"""
	获取统计信息
	"""
	statistics(
		"""
		分组列表
		"""
		Groups: [String!]!
	): [Statistic]

	"""
	服务器当前信息
	"""
	environments: Environments

	metadata(
		"""
		群集的UUID
		"""
		ClusterUUID: String!

		"""
		具体的数据库
		"""
		database: String!
	): String! @auth(requires: [DEVELOPER, REVIEWER, ADMIN])

	"""
	测试数据库群集的连接性
	"""
	testCluster(
		"""
		连接信息
		"""
		input: ValidateConnectionInput
	): Boolean! @auth(requires: [ADMIN])

	"""
	测试正则表达式的有效性
	"""
	testRegexp(
		"""
		正则表达式
		"""
		input: ValidatePatternInput
	): Boolean! @auth(requires: [ADMIN])
}

"""
创建用户
"""
input CreateUserInput {
	"""
	用户邮箱
	"""
	Email:         String!  @length(max: 75)

	"""
	用户密码
	"""
	Password:      String! @length(max: 25)

	"""
	用户名
	"""
	Name:          String! @length(max: 15)

	"""
	用户电话号码
	"""
	Phone:         UInt64

	"""
	角色id列表 
	"""
	RoleUUIDs:     [String!]!

	"""
	群集id列表
	"""
	ClusterUUIDs: [String!]!

	"""
	审核人id列表
	"""
	ReviewerUUIDs: [String!]!

	"""
	用户头像id
	"""
	AvatarUUID:    String!

	"""
	新建的用户的状态
	"""
	Status:        UInt8 @range(begin: 1, end: 255) @matches(pattern: "^(1|2|3)$")
}

"""
更新用户信息
"""
input UpdateUserInput {
	"""
	用户id
	"""
	UserUUID:	ID! 

	"""
	用户邮箱
	"""
	Email:      String! @length(max: 75)

	"""
	用户密码
	"""
	Password:   String! @length(max: 25) 

	"""
	用户状态
	"""
	Status:     UInt8   @range(begin: 1, end: 255) @matches(pattern: "^(1|2|3)$")

	"""
	用户名
	"""
	Name:       String!

	"""
	用户电话号码
	"""
	Phone:      UInt64

	"""
	用户头像
	"""
	AvatarUUID: String!
}

"""
更改用户密码
"""
input PatchPasswordInput {
	"""
	旧密码
	"""
	OldPassword: String! @length(max: 25)

	"""
	新密码
	"""
	NewPassword: String! @length(max: 25)
}

"""
更改用户邮箱
"""
input PatchEmailInput {
	"""
	新的邮箱账号
	"""
	NewEmail: String! @length(max: 75)
}

"""
用户更新个人信息，后续考虑增加一些附加信息
"""
input UpdateProfileInput {
	"""
	头像
	"""
	AvatarUUID: String!

	"""
	真实姓名
	"""
	Name:       String!

	"""
	手机号码
	"""
	Phone:       UInt64
}

"""
给用户授予角色
"""
input GrantRolesInput {
	"""
	用户UUID
	"""
	UserUUID: ID!

	"""
	角色id列表
	"""
	RoleUUIDs: [String!]!
}

"""
回收用户角色
"""
input RevokeRolesInput {
	"""
	用户UUID
	"""
	UserUUID:  ID!

	"""
	回收的角色UUID列表
	"""
	RoleUUIDs: [String!]!
}

"""
给用户增加审核人
"""
input GrantReviewersInput {
	"""
	用户UUID
	"""
	UserUUID:      ID!

	"""
	审核人UUID列表
	"""
	ReviewerUUIDs: [String!]!
}

"""
用户注册
"""
input UserRegisterInput {
	"""
	用户邮箱
	"""
	Email:    String! @length(max: 75)

	"""
	用户密码
	"""
	Password: String! @length(max: 25)
}

"""
用户登陆
"""
input UserLoginInput {
	"""
	登陆邮箱
	"""
	Email:    String! @length(max: 75)

	"""
	登陆密码
	"""
	Password: String! @length(max: 25)
}

"""
管理员更改用户状态
"""
input PatchUserStatusInput {
	"""
	用户UUID
	"""
	UserUUID: ID!

	"""
	用户状态
	"""
	Status:   UInt8! @range(begin: 1, end: 255) @matches(pattern: "^(1|2|3)$")
}

"""
更改审核规则的值
"""
input PatchRuleValuesInput {
	"""
	规则UUID
	"""
	RuleUUID: ID!

	"""
	规则的值
	"""
	Values:   String! @length(max: 150)
}

"""
启用关闭审核规则
"""
input PatchRuleBitwiseInput {
	"""
	规则UUID
	"""
	RuleUUID: ID!

	"""
	规则是否启用true |false
	"""
	Enabled:  String! @matches(pattern: "^(true|false)$")
}

"""
创建群集
"""
input CreateClusterInput {
	"""
	主机名
	"""
	Host:     String! @length(max: 75)

	"""
	主机IP地址
	"""
	IP:       String! @matches(pattern: "^(\\d{1,3}\\.){3}\\d{1,3}$")

	"""
	主机端口
	"""
	Port:     UInt16! @range(begin: 0, end: 65535)

	"""
	群集别名
	"""
	Alias:    String! @length(max: 75)

	"""
	连接群集的账户
	"""
	User:     String! @length(max: 40)

	"""
	连接群集的密码
	"""
	Password: String! @length(max: 40)

	"""
	群集状态（禁用|正常）
	"""
	Status:   UInt8!  @matches(pattern: "^(1|2|3)$")
}

"""
更改群集信息
"""
input UpdateClusterInput {
	"""
	群集UUID
	"""
	ClusterUUID: ID!

	"""
	主机名
	"""
	Host:         String! @length(max: 75)

	"""
	主机IP地址
	"""
	IP:           String! @matches(pattern: "^(\\d{1,3}\\.){3}\\d{1,3}$")

	"""
	端口
	"""
	Port:         UInt16! @range(begin: 0, end: 65535)

	"""
	别名
	"""
	Alias:        String! @length(max: 75)

	"""
	连接群集的账户
	"""
	User:         String! @length(max: 40)

	"""
	群集状态(禁用|正常)
	"""
	Status:       UInt8!  @matches(pattern: "^(1|2)$")

	"""
	连接群集的密码
	"""
	Password:     String! @length(max: 40)
}

"""
修改群集的状态
"""
input PatchClusterStatusInput {
	"""
	群集UUID
	"""
	ClusterUUID: ID!

	"""
	群集状态(禁用|正常)
	"""
	Status:       UInt8! @matches(pattern: "^(1|2|3)$")
}

"""
修改邮件模板
"""
input UpdateTemplateInput {
	"""
	模板名称
	"""
	TemplateUUID: ID!

	"""
	邮件主题
	"""
	Subject:      String!

	"""
	邮件正文
	"""
	Body:         String!

	"""
	主题说明
	"""
	Description:  String!
}

"""
创建工单
"""
input CreateTicketInput {
	"""
	工单提交的目标群集
	"""
	ClusterUUID: String!

	"""
	工单要执行在的数据库名
	"""
	Database:     String! @length(max: 50)

	"""
	工单主题
	"""
	Subject:      String! @length(max: 75)

	"""
	工单内容
	"""
	Content:      String! @length(max: 65535)

	"""
	工单审核人
	"""
	ReviewerUUID: String!
}

"""
编辑工单
"""
input UpdateTicketInput {
	"""
	工单UUID
	"""
	TicketUUID:   ID!

	"""
	工单提交的目标群集
	"""
	ClusterUUID: String!

	"""
	数据库名
	"""
	Database:     String! @length(max: 50)

	"""
	工单主题
	"""
	Subject:      String! @length(max: 75)

	"""
	工单内容
	"""
	Content:      String! @length(max: 65535)

	"""
	工单审核人
	"""
	ReviewerUUID: String!   
}

"""
修改工单状态
"""
input PatchTicketStatusInput {
	"""
	工单UUID
	"""
	TicketUUID: ID!

	"""
	工单状态
	"""
	Status:     String!
}

"""
评论工单
"""
input CreateCommentInput {
	"""
	工单UUID
	"""
	TicketUUID: String!

	"""
	评论内容
	"""
	Content:    String!
}

"""
数据库连接
"""
input ValidateConnectionInput {
	"""
	数据库IP
	"""
	IP:       String! @matches(pattern: "^(\\d{1,3}\\.){3}\\d{1,3}$") 

	"""
	数据库端口
	"""
	Port:     UInt16! @range(begin: 0, end: 65535)

	"""
	连接账户
	"""
	User:     String! @length(max: 40)

	"""
	连接密码
	"""
	Password: String! @length(max: 40)
}

"""
验证正册表达式
"""
input ValidatePatternInput {
	"""
	表达式内容
	"""
	Pattern: String! @length(max: 255)
}

"""
修改系统选项
"""
input PatchOptionValueInput {
	"""
	系统选项UUID
	"""
	OptionUUID: ID!

	"""
	选项值
	"""
	Value:      String! @length(max: 40)
}

"""
创建一个查询
"""
input CreateQueryInput {
	"""
	群集UUID
	"""
	ClusterUUID: String!

	"""
	查询的数据库名
	"""
	Database:     String! @length(max: 50)

	"""
	查询sql
	"""
	Content:      String!  @length(max: 65535)
}

"""
授予用户群集，用户可在发起工单到该群集
"""
input GrantClustersInput {
	"""
	用户UUID
	"""
	UserUUID:      ID!

	"""
	群集UUID列表
	"""
	ClusterUUIDs: [String!]!
}

"""
收回用户群集，取消用户在该群集上创建工单的权限
"""
input RevokeClustersInput {
	"""
	用户UUID
	"""
	UserUUID:      ID!

	"""
	即将收回的群集UUID列表
	"""
	ClusterUUIDs: [String!]!
}

"""
收回用户的审核人
"""
input RevokeReviewersInput {
	"""
	用户UUID
	"""
	UserUUID:      ID!

	"""
	即将收回的审核人UUID列表
	"""
	ReviewerUUIDs: [String!]!
}

"""
查询分析重写
"""
input SoarQueryInput {
	"""
	群集UUID
	"""
	ClusterUUID: String!

	"""
	查询的数据库名
	"""
	Database:     String! @length(max: 50)

	"""
	查询sql
	"""
	Content:      String!  @length(max: 65535)
}

"""
预约执行工单
"""
input ScheduleTicketInput {
	"""
	工单UUID
	"""
	TicketUUID: ID!

	"""
	预约事件
	"""
	Schedule:   String!
}

input ActivateInput {
	Code: String! # 这个解密出来Email和ExpireDate
}

input LostPasswdInput {
	Email: String!
}

input ResetPasswdInput {
	Code:     String! # 这个解密出来Email和ExpireDate
	Password: String!
}

input ResendActivationMailInput {
	Email: String!
}

"""
数据修改入口
"""
type MutationRoot {
	"""
	用户注册
	"""
	register(
		"""
		注册信息
		"""
		input: UserRegisterInput!
	): User!

	"""
	用户登录
	"""
	login(
		"""
		登录信息
		"""
		input: UserLoginInput!
	): LoginPayload

	"""
	用户登出
	"""
	logout: Boolean! @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	用户获取个人信息
	"""
	updateProfile(
		"""
		更新信息
		"""
		input: UpdateProfileInput!
	): User @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	用户自行更新密码
	"""
	updatePassword(
		"""
		新旧密码信息
		"""
		input: PatchPasswordInput!
	): Boolean! @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	用户自行更新登录账号
	"""
	updateEmail(
		"""
		新旧邮件地址信息
		"""
		input: PatchEmailInput!
	): Boolean! @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	关联用户到审核人
	"""
	grantReviewers(
		"""
		即将关联的审核人
		"""
		input: GrantReviewersInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	收回用户到审核人
	"""
	revokeReviewers(
		"""
		即将收回的审核人
		"""
		input: RevokeReviewersInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	关联用户到群集
	"""
	grantClusters(
		"""
		即将关联的群集
		"""
		input: GrantClustersInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	收回用户到群集
	"""
	revokeClusters(
		"""
		即将收回的群集
		"""
		input: RevokeClustersInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	关联用户到角色
	"""
	grantRoles(
		"""
		即将关联的角色
		"""
		input: GrantRolesInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	收回用户到角色
	"""
	revokeRoles(
		"""
		即将收回的角色
		"""
		input: RevokeRolesInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	在后台有管理员直接创建用户
	"""
	createUser(
		"""
		创建用户需要的信息
		"""
		input: CreateUserInput!
	): User @auth(requires: [ADMIN])

	"""
	在后台有管理员直接更新用户
	"""
	updateUser(
		"""
		更新用户需要的信息
		"""
		input: UpdateUserInput!
	): User @auth(requires: [ADMIN])

	"""
	在后台有管理员直接调整用户状态
	"""
	patchUserStatus(
		"""
		用户状态信息
		"""
		input:PatchUserStatusInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	管理员创建群集
	"""
	createCluster(
		"""
		新建群集信息
		"""
		input: CreateClusterInput!
	): Cluster @auth(requires: [ADMIN])

	"""
	管理员修改群集
	"""
	updateCluster(
		"""
		现有群集信息
		"""
		input: UpdateClusterInput!
	): Cluster @auth(requires: [ADMIN])

	"""
	管理员删除群集，如果没有任何工单产生
	"""
	removeCluster(
		"""
		群集唯一标识符
		"""
		id: ID!
	): Boolean! @auth(requires: [ADMIN])

	"""
	修改群集状态
	"""
	patchClusterStatus(
		"""
		群集及状态值
		"""
		input: PatchClusterStatusInput!
	): Boolean! @auth(requires:[ADMIN])

	"""
	修改邮件模板
	"""
	updateTemplate(
		"""
		邮件模板信息
		"""
		input: UpdateTemplateInput
	): Template! @auth(requires:[ADMIN])

	"""
	开发创建新工单  
	"""
	createTicket(
		"""
		新建工单信息
		"""
		input: CreateTicketInput!
	): Ticket @auth(requires: [DEVELOPER])

	"""
	开发修改已存在工单
	"""
	updateTicket(
		"""
		现有工单信息
		"""
		input: UpdateTicketInput!
	): Ticket @auth(requires: [DEVELOPER])

	"""
	开发删除工单，如果工单状态允许删除
	"""
	removeTicket(
		"""
		工单唯一标识符
		"""
		id: ID!
	): Boolean! @auth(requires: [DEVELOPER, ADMIN])

	"""
	修改工单状态
	"""
	patchTicketStatus(
		"""
		工单唯一标识符、状态
		"""
		input:PatchTicketStatusInput!
	): Boolean! @auth(requires: [DEVELOPER, ADMIN])

	"""
	立刻执行一个工单
	"""
	executeTicket(
		"""
		工单唯一标识符
		"""
		id: ID!
	): Boolean! @auth(requires: [REVIEWER])

	"""
	预约执行一个工单
	TODO: 需要返回任务信息
	"""
	scheduleTicket(
		"""
		预约信息
		"""
		input: ScheduleTicketInput!
	): Cron @auth(requires: [REVIEWER])

	"""
	取消已预约执行的工单，并关闭
	"""
	cancelCron(
		"""
		工单唯一标识符
		"""
		id: ID!
	): Boolean! @auth(requires: [REVIEWER, ADMIN])

	"""
	工单的开发或者审核人添加审核意见
	"""
	createComment(
		"""
		新建审核意见信息
		"""
		input: CreateCommentInput!
	): Comment @auth(requires: [USER, DEVELOPER, REVIEWER, ADMIN])

	"""
	管理员修改规则的值
	"""
	patchOptionValues(
		"""
		修改后的规则值
		"""
		input: PatchOptionValueInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	管理员修改规则的值
	"""
	patchRuleValues(
		"""
		修改后的规则值
		"""
		input: PatchRuleValuesInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	管理员关闭或者启用规则
	"""
	patchRuleBitwise(
		"""
		是否允许规则执行
		"""
		input:PatchRuleBitwiseInput!
	): Boolean! @auth(requires: [ADMIN])

	"""
	开发查询数据库
	"""
	createQuery(
		"""
		新建查询信息
		"""
		input: CreateQueryInput!
	): String! @auth(requires: [DEVELOPER])

	"""
	查询分析及优化建议
	"""
	analyzeQuery(
		"""
		待分析优化的查询
		"""
		input: SoarQueryInput!
	): String! @auth(requires: [DEVELOPER, REVIEWER, ADMIN])

	"""
	根据规则重写查询语句
	"""
	rewriteQuery(
		"""
		待重写的查询语句
		"""
		input: SoarQueryInput!
	): String! @auth(requires: [DEVELOPER, REVIEWER, ADMIN])

	"""
	用户激活
	"""
	activate(
		input: ActivateInput!
	): ActivatePayload

	"""
	忘记密码
	"""
	lostPasswd(
		input: LostPasswdInput!
	): Boolean!

	"""
	重置密码
	"""
	resetPasswd(
		input: ResetPasswdInput!
	): Boolean!

	"""
	重置密码
	"""
	resendActivationMail(
		input: ActivateInput! # 原来的激活码，解开反序列化断言后，重新设置过期时间
	): Boolean!
}
# }}} TODO:

type ActivatePayload {
	Email: String!
}

type TicketStatusChangePayload {
	TicketUUID: String!
	Message:    String!
}

"""
消息订阅入口
"""
type SubscriptionRoot {
	ticketStatusChanged: TicketStatusChangePayload!
}

scalar Int8
scalar UInt8
scalar Int16
scalar UInt16
scalar UInt
scalar Int32
scalar UInt32
scalar Int64
scalar UInt64
scalar Timestamp
scalar DateTime
# scalar UUID @matches(pattern: "^(?i)[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$")
`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_auth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []RoleEnum
	if tmp, ok := rawArgs["requires"]; ok {
		arg0, err = ec.unmarshalNRoleEnum2ᚕgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐRoleEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requires"] = arg0
	return args, nil
}

func (ec *executionContext) dir_date_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["format"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["format"] = arg0
	return args, nil
}

func (ec *executionContext) dir_enumInt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["value"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg0
	return args, nil
}

func (ec *executionContext) dir_length_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["max"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["max"] = arg0
	return args, nil
}

func (ec *executionContext) dir_matches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pattern"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pattern"] = arg0
	return args, nil
}

func (ec *executionContext) dir_range_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["begin"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["begin"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["end"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["end"] = arg1
	return args, nil
}

func (ec *executionContext) dir_rename_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	return args, nil
}

func (ec *executionContext) dir_timestamp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["format"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["format"] = arg0
	return args, nil
}

func (ec *executionContext) dir_uuid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["from"]; ok {
		arg1, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	return args, nil
}

func (ec *executionContext) field_MutationRoot_activate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ActivateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNActivateInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐActivateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_analyzeQuery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SoarQueryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSoarQueryInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐSoarQueryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_cancelCron_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_createCluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateClusterInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateClusterInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateClusterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_createComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateCommentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateCommentInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateCommentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_createQuery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateQueryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateQueryInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateQueryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_createTicket_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateTicketInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateTicketInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateTicketInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateUserInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_executeTicket_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_grantClusters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GrantClustersInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGrantClustersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGrantClustersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_grantReviewers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GrantReviewersInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGrantReviewersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGrantReviewersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_grantRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.GrantRolesInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGrantRolesInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGrantRolesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UserLoginInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUserLoginInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUserLoginInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_lostPasswd_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.LostPasswdInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLostPasswdInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐLostPasswdInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_patchClusterStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchClusterStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchClusterStatusInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchClusterStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_patchOptionValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchOptionValueInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchOptionValueInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchOptionValueInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_patchRuleBitwise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchRuleBitwiseInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchRuleBitwiseInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchRuleBitwiseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_patchRuleValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchRuleValuesInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchRuleValuesInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchRuleValuesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_patchTicketStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchTicketStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchTicketStatusInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchTicketStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_patchUserStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchUserStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchUserStatusInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchUserStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UserRegisterInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUserRegisterInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUserRegisterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_removeCluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_removeTicket_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_resendActivationMail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ActivateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNActivateInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐActivateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_resetPasswd_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ResetPasswdInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNResetPasswdInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐResetPasswdInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_revokeClusters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RevokeClustersInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRevokeClustersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRevokeClustersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_revokeReviewers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RevokeReviewersInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRevokeReviewersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRevokeReviewersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_revokeRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RevokeRolesInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRevokeRolesInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRevokeRolesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_rewriteQuery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SoarQueryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSoarQueryInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐSoarQueryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_scheduleTicket_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ScheduleTicketInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNScheduleTicketInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐScheduleTicketInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_updateCluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateClusterInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateClusterInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateClusterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_updateEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchEmailInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchEmailInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_updatePassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PatchPasswordInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPatchPasswordInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchPasswordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_updateProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProfileInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_updateTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.UpdateTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOUpdateTemplateInput2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_updateTicket_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateTicketInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateTicketInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateTicketInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MutationRoot_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateUserInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_clusterSearch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["search"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_QueryRoot_cluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_clusters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_QueryRoot_cron_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_crons_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_QueryRoot_databases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ClusterUUID"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ClusterUUID"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_glossaries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["groups"]; ok {
		arg0, err = ec.unmarshalNString2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groups"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_logs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_QueryRoot_metadata_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ClusterUUID"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ClusterUUID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["database"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["database"] = arg1
	return args, nil
}

func (ec *executionContext) field_QueryRoot_option_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_queries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_QueryRoot_querySearch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["search"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_QueryRoot_query_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_role_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_rule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_statistics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["Groups"]; ok {
		arg0, err = ec.unmarshalNString2ᚕstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Groups"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_testCluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ValidateConnectionInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOValidateConnectionInput2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidateConnectionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_testRegexp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ValidatePatternInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOValidatePatternInput2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidatePatternInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_ticketSearch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["search"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_QueryRoot_ticket_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_tickets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_QueryRoot_userSearch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["search"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_QueryRoot_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryRoot_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Role_Users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Ticket_Comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_Ticket_Statements_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_Clusters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_Queries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field_User_Tickets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["first"]; ok {
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActivatePayload_Email(ctx context.Context, field graphql.CollectedField, obj *ActivatePayload) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ActivatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Avatar_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Avatar) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Avatar",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Avatar_URL(ctx context.Context, field graphql.CollectedField, obj *models.Avatar) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Avatar",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Avatar_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Avatar) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Avatar",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Avatar_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Avatar) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Avatar",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_User(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_Kernel(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kernel, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_Idle(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Idle, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_IOWait(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IOWait, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_Swap(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Swap, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_Nice(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nice, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_LoadMin1(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadMin1, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_LoadMin5(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadMin5, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CPUStats_LoadMin15(ctx context.Context, field graphql.CollectedField, obj *statgo.CPUStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CPUStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadMin15, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_Host(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_Alias(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_IP(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_Port(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint16)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt162uint16(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_User(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_Status(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Cluster_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Cluster) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cluster",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ClusterConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ClusterConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ClusterConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ClusterConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ClusterEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOClusterEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ClusterConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ClusterConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterEdge_node(ctx context.Context, field graphql.CollectedField, obj *ClusterEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ClusterEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cluster)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ClusterEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ClusterEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Comment) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_Content(ctx context.Context, field graphql.CollectedField, obj *models.Comment) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_User(ctx context.Context, field graphql.CollectedField, obj *models.Comment) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Comment().User(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_Ticket(ctx context.Context, field graphql.CollectedField, obj *models.Comment) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Comment().Ticket(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Ticket)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Comment) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Comment) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *CommentConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CommentConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *CommentConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CommentConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*CommentEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommentEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *CommentConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CommentConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentEdge_node(ctx context.Context, field graphql.CollectedField, obj *CommentEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CommentEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Comment)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOComment2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *CommentEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CommentEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_Name(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_Cmd(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cmd, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_Params(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Params, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_Interval(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interval, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_Duration(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_LastRun(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastRun, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_NextRun(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextRun, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_Recurrent(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recurrent, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_Status(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Cron_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Cron) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Cron",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _CronConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *CronConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CronConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CronConnection_edges(ctx context.Context, field graphql.CollectedField, obj *CronConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CronConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*CronEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCronEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CronConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *CronConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CronConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CronEdge_node(ctx context.Context, field graphql.CollectedField, obj *CronEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CronEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cron)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCron2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx, field.Selections, res)
}

func (ec *executionContext) _CronEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *CronEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "CronEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Database_Name(ctx context.Context, field graphql.CollectedField, obj *Database) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Database",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Database_Charset(ctx context.Context, field graphql.CollectedField, obj *Database) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Database",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charset, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Database_Collate(ctx context.Context, field graphql.CollectedField, obj *Database) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Database",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collate, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Environments_CPUStats(ctx context.Context, field graphql.CollectedField, obj *Environments) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Environments",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPUStats, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*statgo.CPUStats)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCPUStats2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐCPUStats(ctx, field.Selections, res)
}

func (ec *executionContext) _Environments_HostInfos(ctx context.Context, field graphql.CollectedField, obj *Environments) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Environments",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostInfos, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*statgo.HostInfos)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHostInfos2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐHostInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _Environments_ProcessStats(ctx context.Context, field graphql.CollectedField, obj *Environments) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Environments",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessStats, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*statgo.ProcessStats)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProcessStats2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐProcessStats(ctx, field.Selections, res)
}

func (ec *executionContext) _Environments_MemStats(ctx context.Context, field graphql.CollectedField, obj *Environments) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Environments",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemStats, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*statgo.MemStats)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNMemStats2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐMemStats(ctx, field.Selections, res)
}

func (ec *executionContext) _Glossary_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Glossary) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Glossary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Glossary_Group(ctx context.Context, field graphql.CollectedField, obj *models.Glossary) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Glossary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Glossary_Key(ctx context.Context, field graphql.CollectedField, obj *models.Glossary) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Glossary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Glossary_Value(ctx context.Context, field graphql.CollectedField, obj *models.Glossary) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Glossary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Glossary_Description(ctx context.Context, field graphql.CollectedField, obj *models.Glossary) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Glossary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Glossary_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Glossary) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Glossary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Glossary_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Glossary) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Glossary",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_OSName(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OSName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_OSRelease(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OSRelease, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_OSVersion(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OSVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_Platform(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_HostName(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_NCPUs(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NCPUs, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_MaxCPUs(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxCPUs, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HostInfos_BitWidth(ctx context.Context, field graphql.CollectedField, obj *statgo.HostInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "HostInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BitWidth, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Log) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_LogID(ctx context.Context, field graphql.CollectedField, obj *models.Log) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_User(ctx context.Context, field graphql.CollectedField, obj *models.Log) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Log().User(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_Operation(ctx context.Context, field graphql.CollectedField, obj *models.Log) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operation, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Log) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _LogConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *LogConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LogConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LogConnection_edges(ctx context.Context, field graphql.CollectedField, obj *LogConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LogConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LogEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLogEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LogConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *LogConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LogConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEdge_node(ctx context.Context, field graphql.CollectedField, obj *LogEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LogEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Log)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLog2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐLog(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *LogEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LogEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginPayload_Me(ctx context.Context, field graphql.CollectedField, obj *LoginPayload) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LoginPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Me, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginPayload_Token(ctx context.Context, field graphql.CollectedField, obj *LoginPayload) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "LoginPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MemStats_Total(ctx context.Context, field graphql.CollectedField, obj *statgo.MemStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MemStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MemStats_Free(ctx context.Context, field graphql.CollectedField, obj *statgo.MemStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MemStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Free, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MemStats_Used(ctx context.Context, field graphql.CollectedField, obj *statgo.MemStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MemStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Used, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MemStats_Cache(ctx context.Context, field graphql.CollectedField, obj *statgo.MemStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MemStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cache, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MemStats_SwapTotal(ctx context.Context, field graphql.CollectedField, obj *statgo.MemStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MemStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwapTotal, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MemStats_SwapUsed(ctx context.Context, field graphql.CollectedField, obj *statgo.MemStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MemStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwapUsed, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MemStats_SwapFree(ctx context.Context, field graphql.CollectedField, obj *statgo.MemStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MemStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwapFree, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_register(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().Register(rctx, args["input"].(models.UserRegisterInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_login(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().Login(rctx, args["input"].(models.UserLoginInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*LoginPayload)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLoginPayload2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLoginPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_logout(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().Logout(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_updateProfile(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_updateProfile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().UpdateProfile(rctx, args["input"].(models.UpdateProfileInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_updatePassword(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_updatePassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().UpdatePassword(rctx, args["input"].(models.PatchPasswordInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_updateEmail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_updateEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().UpdateEmail(rctx, args["input"].(models.PatchEmailInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_grantReviewers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_grantReviewers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().GrantReviewers(rctx, args["input"].(models.GrantReviewersInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_revokeReviewers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_revokeReviewers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().RevokeReviewers(rctx, args["input"].(models.RevokeReviewersInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_grantClusters(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_grantClusters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().GrantClusters(rctx, args["input"].(models.GrantClustersInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_revokeClusters(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_revokeClusters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().RevokeClusters(rctx, args["input"].(models.RevokeClustersInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_grantRoles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_grantRoles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().GrantRoles(rctx, args["input"].(models.GrantRolesInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_revokeRoles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_revokeRoles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().RevokeRoles(rctx, args["input"].(models.RevokeRolesInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_createUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().CreateUser(rctx, args["input"].(models.CreateUserInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_updateUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().UpdateUser(rctx, args["input"].(models.UpdateUserInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_patchUserStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_patchUserStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().PatchUserStatus(rctx, args["input"].(models.PatchUserStatusInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_createCluster(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_createCluster_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().CreateCluster(rctx, args["input"].(models.CreateClusterInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cluster)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_updateCluster(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_updateCluster_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().UpdateCluster(rctx, args["input"].(models.UpdateClusterInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cluster)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_removeCluster(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_removeCluster_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().RemoveCluster(rctx, args["id"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_patchClusterStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_patchClusterStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().PatchClusterStatus(rctx, args["input"].(models.PatchClusterStatusInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_updateTemplate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_updateTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().UpdateTemplate(rctx, args["input"].(*models.UpdateTemplateInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Template)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTemplate2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_createTicket(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_createTicket_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().CreateTicket(rctx, args["input"].(models.CreateTicketInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Ticket)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_updateTicket(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_updateTicket_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().UpdateTicket(rctx, args["input"].(models.UpdateTicketInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Ticket)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_removeTicket(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_removeTicket_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().RemoveTicket(rctx, args["id"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_patchTicketStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_patchTicketStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().PatchTicketStatus(rctx, args["input"].(models.PatchTicketStatusInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_executeTicket(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_executeTicket_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().ExecuteTicket(rctx, args["id"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_scheduleTicket(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_scheduleTicket_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().ScheduleTicket(rctx, args["input"].(models.ScheduleTicketInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cron)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCron2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_cancelCron(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_cancelCron_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().CancelCron(rctx, args["id"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_createComment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_createComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().CreateComment(rctx, args["input"].(models.CreateCommentInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Comment)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOComment2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_patchOptionValues(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_patchOptionValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().PatchOptionValues(rctx, args["input"].(models.PatchOptionValueInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_patchRuleValues(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_patchRuleValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().PatchRuleValues(rctx, args["input"].(models.PatchRuleValuesInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_patchRuleBitwise(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_patchRuleBitwise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().PatchRuleBitwise(rctx, args["input"].(models.PatchRuleBitwiseInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_createQuery(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_createQuery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().CreateQuery(rctx, args["input"].(models.CreateQueryInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_analyzeQuery(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_analyzeQuery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().AnalyzeQuery(rctx, args["input"].(models.SoarQueryInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_rewriteQuery(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_rewriteQuery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().RewriteQuery(rctx, args["input"].(models.SoarQueryInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_activate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_activate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().Activate(rctx, args["input"].(models.ActivateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ActivatePayload)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOActivatePayload2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐActivatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_lostPasswd(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_lostPasswd_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().LostPasswd(rctx, args["input"].(models.LostPasswdInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_resetPasswd(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_resetPasswd_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().ResetPasswd(rctx, args["input"].(models.ResetPasswdInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MutationRoot_resendActivationMail(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "MutationRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MutationRoot_resendActivationMail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MutationRoot().ResendActivationMail(rctx, args["input"].(models.ActivateInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_Name(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_Value(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_Writable(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Writable, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_Description(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_Element(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Element, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Option_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Option) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStats_Total(ctx context.Context, field graphql.CollectedField, obj *statgo.ProcessStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStats_Running(ctx context.Context, field graphql.CollectedField, obj *statgo.ProcessStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Running, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStats_Sleeping(ctx context.Context, field graphql.CollectedField, obj *statgo.ProcessStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sleeping, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStats_Stopped(ctx context.Context, field graphql.CollectedField, obj *statgo.ProcessStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stopped, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcessStats_Zombie(ctx context.Context, field graphql.CollectedField, obj *statgo.ProcessStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "ProcessStats",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zombie, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Type(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Cluster(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cluster(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Cluster)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Database(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Database, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Content(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Plan(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plan, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_User(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Query) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *QueryConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *QueryConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*QueryEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQueryEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *QueryConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryEdge_node(ctx context.Context, field graphql.CollectedField, obj *QueryEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Query)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQuery2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *QueryEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_cluster(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_cluster_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Cluster(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cluster)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_clusters(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_clusters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Clusters(rctx, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ClusterConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOClusterConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_clusterSearch(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_clusterSearch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().ClusterSearch(rctx, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ClusterConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOClusterConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_logs(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_logs_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Logs(rctx, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*LogConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLogConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_me(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Me(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_options(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Options(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Option)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOption2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐOption(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_option(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_option_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Option(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Option)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOption2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐOption(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_query(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_query_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Query(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Query)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQuery2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_queries(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_queries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Queries(rctx, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*QueryConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQueryConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_querySearch(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_querySearch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().QuerySearch(rctx, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*QueryConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQueryConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_templates(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Templates(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Template)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTemplate2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_ticket(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_ticket_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Ticket(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Ticket)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_tickets(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_tickets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Tickets(rctx, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TicketConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicketConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_ticketSearch(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_ticketSearch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().TicketSearch(rctx, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TicketConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicketConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_user(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().User(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_users(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Users(rctx, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_userSearch(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_userSearch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().UserSearch(rctx, args["search"].(string), args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_avatars(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Avatars(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Avatar)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAvatar2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_rule(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_rule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Rule(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Rule)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORule2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRule(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_rules(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Rules(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Rule)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORule2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRule(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_role(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_role_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Role(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Role)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORole2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_roles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Roles(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Role)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORole2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_glossaries(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_glossaries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Glossaries(rctx, args["groups"].([]string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Glossary)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOGlossary2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGlossary(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_cron(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_cron_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Cron(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cron)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCron2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_crons(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_crons_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Crons(rctx, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CronConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCronConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_tasks(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Tasks(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Cron)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCron2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_databases(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_databases_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Databases(rctx, args["ClusterUUID"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Database)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalODatabase2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐDatabase(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_statistics(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_statistics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Statistics(rctx, args["Groups"].([]string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Statistic)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOStatistic2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatistic(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_environments(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Environments(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Environments)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOEnvironments2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐEnvironments(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_metadata(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_metadata_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().Metadata(rctx, args["ClusterUUID"].(string), args["database"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_testCluster(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_testCluster_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().TestCluster(rctx, args["input"].(*models.ValidateConnectionInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot_testRegexp(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot_testRegexp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.QueryRoot().TestRegexp(rctx, args["input"].(*models.ValidatePatternInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_QueryRoot___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryRoot___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "QueryRoot",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Role) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_Name(ctx context.Context, field graphql.CollectedField, obj *models.Role) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_Description(ctx context.Context, field graphql.CollectedField, obj *models.Role) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_Users(ctx context.Context, field graphql.CollectedField, obj *models.Role) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Role_Users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().Users(rctx, obj, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Role) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Role) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Name(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Group(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Description(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_VldrGroup(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VldrGroup, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint16)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt162uint16(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Values(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Bitwise(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bitwise, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Func(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Func, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Message(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_Element(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Element, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Rule_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Rule) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Rule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_Sequence(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint16)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt162uint16(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_Content(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_TypeDesc(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Statement().TypeDesc(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_Status(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_Report(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Report, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_Plan(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plan, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_Ticket(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Statement().Ticket(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Ticket)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_RowsAffected(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RowsAffected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Statement_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Statement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _StatementConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *StatementConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "StatementConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StatementConnection_edges(ctx context.Context, field graphql.CollectedField, obj *StatementConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "StatementConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*StatementEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOStatementEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _StatementConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *StatementConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "StatementConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatementEdge_node(ctx context.Context, field graphql.CollectedField, obj *StatementEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "StatementEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Statement)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOStatement2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatement(ctx, field.Selections, res)
}

func (ec *executionContext) _StatementEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *StatementEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "StatementEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statistic_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Statistic) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statistic",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statistic_Group(ctx context.Context, field graphql.CollectedField, obj *models.Statistic) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statistic",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statistic_Key(ctx context.Context, field graphql.CollectedField, obj *models.Statistic) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statistic",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Statistic_Value(ctx context.Context, field graphql.CollectedField, obj *models.Statistic) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statistic",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Statistic_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Statistic) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statistic",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Statistic_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Statistic) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Statistic",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _SubscriptionRoot_ticketStatusChanged(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
		Args:  nil,
	})
	// FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	//          and Tracer stack
	rctx := ctx
	results, err := ec.resolvers.SubscriptionRoot().TicketStatusChanged(rctx)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNTicketStatusChangePayload2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketStatusChangePayload(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Template_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Template) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Template",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_Subject(ctx context.Context, field graphql.CollectedField, obj *models.Template) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Template",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_Body(ctx context.Context, field graphql.CollectedField, obj *models.Template) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Template",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_Description(ctx context.Context, field graphql.CollectedField, obj *models.Template) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Template",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Template) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Template",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Template) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Template",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_UUID(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Cluster(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ticket().Cluster(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Cluster)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Database(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Database, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Subject(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Content(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Status(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_User(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ticket().User(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Reviewer(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ticket().Reviewer(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Cron(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ticket().Cron(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cron)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCron2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Statements(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Ticket_Statements_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ticket().Statements(rctx, obj, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*StatementConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNStatementConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_Comments(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Ticket_Comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Ticket().Comments(rctx, obj, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CommentConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommentConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _Ticket_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.Ticket) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Ticket",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _TicketConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *TicketConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TicketConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TicketConnection_edges(ctx context.Context, field graphql.CollectedField, obj *TicketConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TicketConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*TicketEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicketEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _TicketConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *TicketConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TicketConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TicketEdge_node(ctx context.Context, field graphql.CollectedField, obj *TicketEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TicketEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Ticket)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx, field.Selections, res)
}

func (ec *executionContext) _TicketEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *TicketEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TicketEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TicketStatusChangePayload_TicketUUID(ctx context.Context, field graphql.CollectedField, obj *TicketStatusChangePayload) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TicketStatusChangePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TicketUUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TicketStatusChangePayload_Message(ctx context.Context, field graphql.CollectedField, obj *TicketStatusChangePayload) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "TicketStatusChangePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_UUID(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Email(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Status(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Name(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Phone(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Avatar(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Avatar(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Avatar)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAvatar2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Roles(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Roles(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Role)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORole2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Reviewers(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Reviewers(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Statistics(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Statistics(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Statistic)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOStatistic2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatistic(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Clusters(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_Clusters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Clusters(rctx, obj, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ClusterConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOClusterConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Tickets(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_Tickets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Tickets(rctx, obj, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TicketConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTicketConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_Queries(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_Queries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Queries(rctx, obj, args["after"].(*string), args["before"].(*string), args["first"].(*int), args["last"].(*int))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*QueryConnection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQueryConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_CreateAt(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_UpdateAt(ctx context.Context, field graphql.CollectedField, obj *models.User) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUInt2uint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *UserConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "UserConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConnection_edges(ctx context.Context, field graphql.CollectedField, obj *UserConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "UserConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*UserEdge)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *UserConnection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "UserConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEdge_node(ctx context.Context, field graphql.CollectedField, obj *UserEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "UserEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *UserEdge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "UserEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActivateInput(ctx context.Context, v interface{}) (models.ActivateInput, error) {
	var it models.ActivateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateClusterInput(ctx context.Context, v interface{}) (models.CreateClusterInput, error) {
	var it models.CreateClusterInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Host":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Host = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "IP":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Matches(ctx, it, n, "^(\\d{1,3}\\.){3}\\d{1,3}$")
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.IP = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Port":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNUInt162uint16(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Range(ctx, it, n, 0, 65535)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint16); ok {
				it.Port = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint16`, tmp)
			}
		case "Alias":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Alias = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "User":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 40)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.User = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Password":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 40)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Status":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNUInt82uint8(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Matches(ctx, it, n, "^(1|2|3)$")
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint8); ok {
				it.Status = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint8`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCommentInput(ctx context.Context, v interface{}) (models.CreateCommentInput, error) {
	var it models.CreateCommentInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TicketUUID":
			var err error
			it.TicketUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Content":
			var err error
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateQueryInput(ctx context.Context, v interface{}) (models.CreateQueryInput, error) {
	var it models.CreateQueryInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ClusterUUID":
			var err error
			it.ClusterUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Database":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 50)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Database = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Content":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 65535)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Content = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTicketInput(ctx context.Context, v interface{}) (models.CreateTicketInput, error) {
	var it models.CreateTicketInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ClusterUUID":
			var err error
			it.ClusterUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Database":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 50)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Database = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Subject":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Subject = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Content":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 65535)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Content = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "ReviewerUUID":
			var err error
			it.ReviewerUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserInput(ctx context.Context, v interface{}) (models.CreateUserInput, error) {
	var it models.CreateUserInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Email = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Password":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 25)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Name":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 15)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Phone":
			var err error
			it.Phone, err = ec.unmarshalOUInt642uint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "RoleUUIDs":
			var err error
			it.RoleUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ClusterUUIDs":
			var err error
			it.ClusterUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReviewerUUIDs":
			var err error
			it.ReviewerUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AvatarUUID":
			var err error
			it.AvatarUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOUInt82uint8(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Range(ctx, it, n, 1, 255)
			}
			getField2 := func(ctx context.Context) (res interface{}, err error) {
				n := getField1
				return ec.directives.Matches(ctx, it, n, "^(1|2|3)$")
			}

			tmp, err := getField2(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint8); ok {
				it.Status = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint8`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGrantClustersInput(ctx context.Context, v interface{}) (models.GrantClustersInput, error) {
	var it models.GrantClustersInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ClusterUUIDs":
			var err error
			it.ClusterUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGrantReviewersInput(ctx context.Context, v interface{}) (models.GrantReviewersInput, error) {
	var it models.GrantReviewersInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReviewerUUIDs":
			var err error
			it.ReviewerUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGrantRolesInput(ctx context.Context, v interface{}) (models.GrantRolesInput, error) {
	var it models.GrantRolesInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "RoleUUIDs":
			var err error
			it.RoleUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLostPasswdInput(ctx context.Context, v interface{}) (models.LostPasswdInput, error) {
	var it models.LostPasswdInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchClusterStatusInput(ctx context.Context, v interface{}) (models.PatchClusterStatusInput, error) {
	var it models.PatchClusterStatusInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ClusterUUID":
			var err error
			it.ClusterUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNUInt82uint8(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Matches(ctx, it, n, "^(1|2|3)$")
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint8); ok {
				it.Status = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint8`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchEmailInput(ctx context.Context, v interface{}) (models.PatchEmailInput, error) {
	var it models.PatchEmailInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "NewEmail":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.NewEmail = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchOptionValueInput(ctx context.Context, v interface{}) (models.PatchOptionValueInput, error) {
	var it models.PatchOptionValueInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OptionUUID":
			var err error
			it.OptionUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 40)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Value = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchPasswordInput(ctx context.Context, v interface{}) (models.PatchPasswordInput, error) {
	var it models.PatchPasswordInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OldPassword":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 25)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.OldPassword = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "NewPassword":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 25)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.NewPassword = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchRuleBitwiseInput(ctx context.Context, v interface{}) (models.PatchRuleBitwiseInput, error) {
	var it models.PatchRuleBitwiseInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "RuleUUID":
			var err error
			it.RuleUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Enabled":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Matches(ctx, it, n, "^(true|false)$")
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Enabled = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchRuleValuesInput(ctx context.Context, v interface{}) (models.PatchRuleValuesInput, error) {
	var it models.PatchRuleValuesInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "RuleUUID":
			var err error
			it.RuleUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Values":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 150)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Values = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchTicketStatusInput(ctx context.Context, v interface{}) (models.PatchTicketStatusInput, error) {
	var it models.PatchTicketStatusInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TicketUUID":
			var err error
			it.TicketUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchUserStatusInput(ctx context.Context, v interface{}) (models.PatchUserStatusInput, error) {
	var it models.PatchUserStatusInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNUInt82uint8(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Range(ctx, it, n, 1, 255)
			}
			getField2 := func(ctx context.Context) (res interface{}, err error) {
				n := getField1
				return ec.directives.Matches(ctx, it, n, "^(1|2|3)$")
			}

			tmp, err := getField2(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint8); ok {
				it.Status = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint8`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResendActivationMailInput(ctx context.Context, v interface{}) (models.ResendActivationMailInput, error) {
	var it models.ResendActivationMailInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetPasswdInput(ctx context.Context, v interface{}) (models.ResetPasswdInput, error) {
	var it models.ResetPasswdInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRevokeClustersInput(ctx context.Context, v interface{}) (models.RevokeClustersInput, error) {
	var it models.RevokeClustersInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ClusterUUIDs":
			var err error
			it.ClusterUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRevokeReviewersInput(ctx context.Context, v interface{}) (models.RevokeReviewersInput, error) {
	var it models.RevokeReviewersInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReviewerUUIDs":
			var err error
			it.ReviewerUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRevokeRolesInput(ctx context.Context, v interface{}) (models.RevokeRolesInput, error) {
	var it models.RevokeRolesInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "RoleUUIDs":
			var err error
			it.RoleUUIDs, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScheduleTicketInput(ctx context.Context, v interface{}) (models.ScheduleTicketInput, error) {
	var it models.ScheduleTicketInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TicketUUID":
			var err error
			it.TicketUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Schedule":
			var err error
			it.Schedule, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSoarQueryInput(ctx context.Context, v interface{}) (models.SoarQueryInput, error) {
	var it models.SoarQueryInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ClusterUUID":
			var err error
			it.ClusterUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Database":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 50)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Database = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Content":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 65535)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Content = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateClusterInput(ctx context.Context, v interface{}) (models.UpdateClusterInput, error) {
	var it models.UpdateClusterInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ClusterUUID":
			var err error
			it.ClusterUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Host":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Host = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "IP":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Matches(ctx, it, n, "^(\\d{1,3}\\.){3}\\d{1,3}$")
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.IP = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Port":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNUInt162uint16(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Range(ctx, it, n, 0, 65535)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint16); ok {
				it.Port = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint16`, tmp)
			}
		case "Alias":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Alias = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "User":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 40)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.User = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Status":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNUInt82uint8(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Matches(ctx, it, n, "^(1|2)$")
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint8); ok {
				it.Status = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint8`, tmp)
			}
		case "Password":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 40)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProfileInput(ctx context.Context, v interface{}) (models.UpdateProfileInput, error) {
	var it models.UpdateProfileInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AvatarUUID":
			var err error
			it.AvatarUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Phone":
			var err error
			it.Phone, err = ec.unmarshalOUInt642uint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTemplateInput(ctx context.Context, v interface{}) (models.UpdateTemplateInput, error) {
	var it models.UpdateTemplateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TemplateUUID":
			var err error
			it.TemplateUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error
			it.Subject, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Body":
			var err error
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTicketInput(ctx context.Context, v interface{}) (models.UpdateTicketInput, error) {
	var it models.UpdateTicketInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TicketUUID":
			var err error
			it.TicketUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ClusterUUID":
			var err error
			it.ClusterUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Database":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 50)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Database = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Subject":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Subject = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Content":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 65535)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Content = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "ReviewerUUID":
			var err error
			it.ReviewerUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, v interface{}) (models.UpdateUserInput, error) {
	var it models.UpdateUserInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "UserUUID":
			var err error
			it.UserUUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Email = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Password":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 25)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Status":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOUInt82uint8(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Range(ctx, it, n, 1, 255)
			}
			getField2 := func(ctx context.Context) (res interface{}, err error) {
				n := getField1
				return ec.directives.Matches(ctx, it, n, "^(1|2|3)$")
			}

			tmp, err := getField2(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint8); ok {
				it.Status = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint8`, tmp)
			}
		case "Name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Phone":
			var err error
			it.Phone, err = ec.unmarshalOUInt642uint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "AvatarUUID":
			var err error
			it.AvatarUUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLoginInput(ctx context.Context, v interface{}) (models.UserLoginInput, error) {
	var it models.UserLoginInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Email = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Password":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 25)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRegisterInput(ctx context.Context, v interface{}) (models.UserRegisterInput, error) {
	var it models.UserRegisterInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 75)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Email = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Password":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 25)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputValidateConnectionInput(ctx context.Context, v interface{}) (models.ValidateConnectionInput, error) {
	var it models.ValidateConnectionInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IP":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Matches(ctx, it, n, "^(\\d{1,3}\\.){3}\\d{1,3}$")
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.IP = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Port":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNUInt162uint16(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Range(ctx, it, n, 0, 65535)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(uint16); ok {
				it.Port = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be uint16`, tmp)
			}
		case "User":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 40)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.User = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		case "Password":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 40)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Password = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputValidatePatternInput(ctx context.Context, v interface{}) (models.ValidatePatternInput, error) {
	var it models.ValidatePatternInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Pattern":
			var err error
			getField0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			getField1 := func(ctx context.Context) (res interface{}, err error) {
				n := getField0
				return ec.directives.Length(ctx, it, n, 255)
			}

			tmp, err := getField1(ctx)
			if err != nil {
				return it, err
			}
			if data, ok := tmp.(string); ok {
				it.Pattern = data
			} else {
				return it, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *Node) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case models.Avatar:
		return ec._Avatar(ctx, sel, &obj)
	case *models.Avatar:
		return ec._Avatar(ctx, sel, obj)
	case models.Cron:
		return ec._Cron(ctx, sel, &obj)
	case *models.Cron:
		return ec._Cron(ctx, sel, obj)
	case models.Comment:
		return ec._Comment(ctx, sel, &obj)
	case *models.Comment:
		return ec._Comment(ctx, sel, obj)
	case models.Glossary:
		return ec._Glossary(ctx, sel, &obj)
	case *models.Glossary:
		return ec._Glossary(ctx, sel, obj)
	case models.Cluster:
		return ec._Cluster(ctx, sel, &obj)
	case *models.Cluster:
		return ec._Cluster(ctx, sel, obj)
	case models.Option:
		return ec._Option(ctx, sel, &obj)
	case *models.Option:
		return ec._Option(ctx, sel, obj)
	case models.Query:
		return ec._Query(ctx, sel, &obj)
	case *models.Query:
		return ec._Query(ctx, sel, obj)
	case models.Role:
		return ec._Role(ctx, sel, &obj)
	case *models.Role:
		return ec._Role(ctx, sel, obj)
	case models.Rule:
		return ec._Rule(ctx, sel, &obj)
	case *models.Rule:
		return ec._Rule(ctx, sel, obj)
	case models.Statement:
		return ec._Statement(ctx, sel, &obj)
	case *models.Statement:
		return ec._Statement(ctx, sel, obj)
	case models.Statistic:
		return ec._Statistic(ctx, sel, &obj)
	case *models.Statistic:
		return ec._Statistic(ctx, sel, obj)
	case models.Template:
		return ec._Template(ctx, sel, &obj)
	case *models.Template:
		return ec._Template(ctx, sel, obj)
	case models.Ticket:
		return ec._Ticket(ctx, sel, &obj)
	case *models.Ticket:
		return ec._Ticket(ctx, sel, obj)
	case models.User:
		return ec._User(ctx, sel, &obj)
	case *models.User:
		return ec._User(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Searchable(ctx context.Context, sel ast.SelectionSet, obj *Searchable) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case models.User:
		return ec._User(ctx, sel, &obj)
	case *models.User:
		return ec._User(ctx, sel, obj)
	case models.Ticket:
		return ec._Ticket(ctx, sel, &obj)
	case *models.Ticket:
		return ec._Ticket(ctx, sel, obj)
	case models.Cluster:
		return ec._Cluster(ctx, sel, &obj)
	case *models.Cluster:
		return ec._Cluster(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activatePayloadImplementors = []string{"ActivatePayload"}

func (ec *executionContext) _ActivatePayload(ctx context.Context, sel ast.SelectionSet, obj *ActivatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, activatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivatePayload")
		case "Email":
			out.Values[i] = ec._ActivatePayload_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var avatarImplementors = []string{"Avatar", "Node"}

func (ec *executionContext) _Avatar(ctx context.Context, sel ast.SelectionSet, obj *models.Avatar) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, avatarImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Avatar")
		case "UUID":
			out.Values[i] = ec._Avatar_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "URL":
			out.Values[i] = ec._Avatar_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Avatar_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Avatar_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cPUStatsImplementors = []string{"CPUStats"}

func (ec *executionContext) _CPUStats(ctx context.Context, sel ast.SelectionSet, obj *statgo.CPUStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, cPUStatsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CPUStats")
		case "User":
			out.Values[i] = ec._CPUStats_User(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Kernel":
			out.Values[i] = ec._CPUStats_Kernel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Idle":
			out.Values[i] = ec._CPUStats_Idle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "IOWait":
			out.Values[i] = ec._CPUStats_IOWait(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Swap":
			out.Values[i] = ec._CPUStats_Swap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Nice":
			out.Values[i] = ec._CPUStats_Nice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LoadMin1":
			out.Values[i] = ec._CPUStats_LoadMin1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LoadMin5":
			out.Values[i] = ec._CPUStats_LoadMin5(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LoadMin15":
			out.Values[i] = ec._CPUStats_LoadMin15(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterImplementors = []string{"Cluster", "Searchable", "Node"}

func (ec *executionContext) _Cluster(ctx context.Context, sel ast.SelectionSet, obj *models.Cluster) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, clusterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cluster")
		case "UUID":
			out.Values[i] = ec._Cluster_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Host":
			out.Values[i] = ec._Cluster_Host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Alias":
			out.Values[i] = ec._Cluster_Alias(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "IP":
			out.Values[i] = ec._Cluster_IP(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Port":
			out.Values[i] = ec._Cluster_Port(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "User":
			out.Values[i] = ec._Cluster_User(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._Cluster_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Cluster_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Cluster_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterConnectionImplementors = []string{"ClusterConnection"}

func (ec *executionContext) _ClusterConnection(ctx context.Context, sel ast.SelectionSet, obj *ClusterConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, clusterConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClusterConnection")
		case "pageInfo":
			out.Values[i] = ec._ClusterConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._ClusterConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ClusterConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterEdgeImplementors = []string{"ClusterEdge"}

func (ec *executionContext) _ClusterEdge(ctx context.Context, sel ast.SelectionSet, obj *ClusterEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, clusterEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClusterEdge")
		case "node":
			out.Values[i] = ec._ClusterEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ClusterEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentImplementors = []string{"Comment", "Node"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *models.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "UUID":
			out.Values[i] = ec._Comment_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Content":
			out.Values[i] = ec._Comment_Content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "User":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Comment_User(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Ticket":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Comment_Ticket(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "CreateAt":
			out.Values[i] = ec._Comment_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "UpdateAt":
			out.Values[i] = ec._Comment_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentConnectionImplementors = []string{"CommentConnection"}

func (ec *executionContext) _CommentConnection(ctx context.Context, sel ast.SelectionSet, obj *CommentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentConnection")
		case "pageInfo":
			out.Values[i] = ec._CommentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CommentConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._CommentConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentEdgeImplementors = []string{"CommentEdge"}

func (ec *executionContext) _CommentEdge(ctx context.Context, sel ast.SelectionSet, obj *CommentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentEdge")
		case "node":
			out.Values[i] = ec._CommentEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CommentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cronImplementors = []string{"Cron", "Node"}

func (ec *executionContext) _Cron(ctx context.Context, sel ast.SelectionSet, obj *models.Cron) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, cronImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cron")
		case "UUID":
			out.Values[i] = ec._Cron_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":
			out.Values[i] = ec._Cron_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Cmd":
			out.Values[i] = ec._Cron_Cmd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Params":
			out.Values[i] = ec._Cron_Params(ctx, field, obj)
		case "Interval":
			out.Values[i] = ec._Cron_Interval(ctx, field, obj)
		case "Duration":
			out.Values[i] = ec._Cron_Duration(ctx, field, obj)
		case "LastRun":
			out.Values[i] = ec._Cron_LastRun(ctx, field, obj)
		case "NextRun":
			out.Values[i] = ec._Cron_NextRun(ctx, field, obj)
		case "Recurrent":
			out.Values[i] = ec._Cron_Recurrent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._Cron_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Cron_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Cron_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cronConnectionImplementors = []string{"CronConnection"}

func (ec *executionContext) _CronConnection(ctx context.Context, sel ast.SelectionSet, obj *CronConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, cronConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CronConnection")
		case "pageInfo":
			out.Values[i] = ec._CronConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._CronConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._CronConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cronEdgeImplementors = []string{"CronEdge"}

func (ec *executionContext) _CronEdge(ctx context.Context, sel ast.SelectionSet, obj *CronEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, cronEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CronEdge")
		case "node":
			out.Values[i] = ec._CronEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CronEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var databaseImplementors = []string{"Database"}

func (ec *executionContext) _Database(ctx context.Context, sel ast.SelectionSet, obj *Database) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, databaseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Database")
		case "Name":
			out.Values[i] = ec._Database_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Charset":
			out.Values[i] = ec._Database_Charset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Collate":
			out.Values[i] = ec._Database_Collate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var environmentsImplementors = []string{"Environments"}

func (ec *executionContext) _Environments(ctx context.Context, sel ast.SelectionSet, obj *Environments) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, environmentsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Environments")
		case "CPUStats":
			out.Values[i] = ec._Environments_CPUStats(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "HostInfos":
			out.Values[i] = ec._Environments_HostInfos(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ProcessStats":
			out.Values[i] = ec._Environments_ProcessStats(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemStats":
			out.Values[i] = ec._Environments_MemStats(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var glossaryImplementors = []string{"Glossary", "Node"}

func (ec *executionContext) _Glossary(ctx context.Context, sel ast.SelectionSet, obj *models.Glossary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, glossaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Glossary")
		case "UUID":
			out.Values[i] = ec._Glossary_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Group":
			out.Values[i] = ec._Glossary_Group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Key":
			out.Values[i] = ec._Glossary_Key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Value":
			out.Values[i] = ec._Glossary_Value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Description":
			out.Values[i] = ec._Glossary_Description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Glossary_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Glossary_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hostInfosImplementors = []string{"HostInfos"}

func (ec *executionContext) _HostInfos(ctx context.Context, sel ast.SelectionSet, obj *statgo.HostInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, hostInfosImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HostInfos")
		case "OSName":
			out.Values[i] = ec._HostInfos_OSName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OSRelease":
			out.Values[i] = ec._HostInfos_OSRelease(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OSVersion":
			out.Values[i] = ec._HostInfos_OSVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Platform":
			out.Values[i] = ec._HostInfos_Platform(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "HostName":
			out.Values[i] = ec._HostInfos_HostName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "NCPUs":
			out.Values[i] = ec._HostInfos_NCPUs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MaxCPUs":
			out.Values[i] = ec._HostInfos_MaxCPUs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "BitWidth":
			out.Values[i] = ec._HostInfos_BitWidth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logImplementors = []string{"Log"}

func (ec *executionContext) _Log(ctx context.Context, sel ast.SelectionSet, obj *models.Log) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Log")
		case "UUID":
			out.Values[i] = ec._Log_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "LogID":
			out.Values[i] = ec._Log_LogID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "User":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Log_User(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Operation":
			out.Values[i] = ec._Log_Operation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "CreateAt":
			out.Values[i] = ec._Log_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logConnectionImplementors = []string{"LogConnection"}

func (ec *executionContext) _LogConnection(ctx context.Context, sel ast.SelectionSet, obj *LogConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, logConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogConnection")
		case "pageInfo":
			out.Values[i] = ec._LogConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._LogConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._LogConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logEdgeImplementors = []string{"LogEdge"}

func (ec *executionContext) _LogEdge(ctx context.Context, sel ast.SelectionSet, obj *LogEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, logEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogEdge")
		case "node":
			out.Values[i] = ec._LogEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._LogEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginPayloadImplementors = []string{"LoginPayload"}

func (ec *executionContext) _LoginPayload(ctx context.Context, sel ast.SelectionSet, obj *LoginPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, loginPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginPayload")
		case "Me":
			out.Values[i] = ec._LoginPayload_Me(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Token":
			out.Values[i] = ec._LoginPayload_Token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var memStatsImplementors = []string{"MemStats"}

func (ec *executionContext) _MemStats(ctx context.Context, sel ast.SelectionSet, obj *statgo.MemStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, memStatsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemStats")
		case "Total":
			out.Values[i] = ec._MemStats_Total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Free":
			out.Values[i] = ec._MemStats_Free(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Used":
			out.Values[i] = ec._MemStats_Used(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Cache":
			out.Values[i] = ec._MemStats_Cache(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SwapTotal":
			out.Values[i] = ec._MemStats_SwapTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SwapUsed":
			out.Values[i] = ec._MemStats_SwapUsed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SwapFree":
			out.Values[i] = ec._MemStats_SwapFree(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationRootImplementors = []string{"MutationRoot"}

func (ec *executionContext) _MutationRoot(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, mutationRootImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "MutationRoot",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MutationRoot")
		case "register":
			out.Values[i] = ec._MutationRoot_register(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "login":
			out.Values[i] = ec._MutationRoot_login(ctx, field)
		case "logout":
			out.Values[i] = ec._MutationRoot_logout(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProfile":
			out.Values[i] = ec._MutationRoot_updateProfile(ctx, field)
		case "updatePassword":
			out.Values[i] = ec._MutationRoot_updatePassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEmail":
			out.Values[i] = ec._MutationRoot_updateEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grantReviewers":
			out.Values[i] = ec._MutationRoot_grantReviewers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revokeReviewers":
			out.Values[i] = ec._MutationRoot_revokeReviewers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grantClusters":
			out.Values[i] = ec._MutationRoot_grantClusters(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revokeClusters":
			out.Values[i] = ec._MutationRoot_revokeClusters(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grantRoles":
			out.Values[i] = ec._MutationRoot_grantRoles(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revokeRoles":
			out.Values[i] = ec._MutationRoot_revokeRoles(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUser":
			out.Values[i] = ec._MutationRoot_createUser(ctx, field)
		case "updateUser":
			out.Values[i] = ec._MutationRoot_updateUser(ctx, field)
		case "patchUserStatus":
			out.Values[i] = ec._MutationRoot_patchUserStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCluster":
			out.Values[i] = ec._MutationRoot_createCluster(ctx, field)
		case "updateCluster":
			out.Values[i] = ec._MutationRoot_updateCluster(ctx, field)
		case "removeCluster":
			out.Values[i] = ec._MutationRoot_removeCluster(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patchClusterStatus":
			out.Values[i] = ec._MutationRoot_patchClusterStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTemplate":
			out.Values[i] = ec._MutationRoot_updateTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTicket":
			out.Values[i] = ec._MutationRoot_createTicket(ctx, field)
		case "updateTicket":
			out.Values[i] = ec._MutationRoot_updateTicket(ctx, field)
		case "removeTicket":
			out.Values[i] = ec._MutationRoot_removeTicket(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patchTicketStatus":
			out.Values[i] = ec._MutationRoot_patchTicketStatus(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "executeTicket":
			out.Values[i] = ec._MutationRoot_executeTicket(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scheduleTicket":
			out.Values[i] = ec._MutationRoot_scheduleTicket(ctx, field)
		case "cancelCron":
			out.Values[i] = ec._MutationRoot_cancelCron(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createComment":
			out.Values[i] = ec._MutationRoot_createComment(ctx, field)
		case "patchOptionValues":
			out.Values[i] = ec._MutationRoot_patchOptionValues(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patchRuleValues":
			out.Values[i] = ec._MutationRoot_patchRuleValues(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patchRuleBitwise":
			out.Values[i] = ec._MutationRoot_patchRuleBitwise(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createQuery":
			out.Values[i] = ec._MutationRoot_createQuery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "analyzeQuery":
			out.Values[i] = ec._MutationRoot_analyzeQuery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rewriteQuery":
			out.Values[i] = ec._MutationRoot_rewriteQuery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activate":
			out.Values[i] = ec._MutationRoot_activate(ctx, field)
		case "lostPasswd":
			out.Values[i] = ec._MutationRoot_lostPasswd(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetPasswd":
			out.Values[i] = ec._MutationRoot_resetPasswd(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resendActivationMail":
			out.Values[i] = ec._MutationRoot_resendActivationMail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var optionImplementors = []string{"Option", "Node"}

func (ec *executionContext) _Option(ctx context.Context, sel ast.SelectionSet, obj *models.Option) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, optionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Option")
		case "UUID":
			out.Values[i] = ec._Option_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":
			out.Values[i] = ec._Option_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Value":
			out.Values[i] = ec._Option_Value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Writable":
			out.Values[i] = ec._Option_Writable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Description":
			out.Values[i] = ec._Option_Description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Element":
			out.Values[i] = ec._Option_Element(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Option_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Option_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var processStatsImplementors = []string{"ProcessStats"}

func (ec *executionContext) _ProcessStats(ctx context.Context, sel ast.SelectionSet, obj *statgo.ProcessStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, processStatsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcessStats")
		case "Total":
			out.Values[i] = ec._ProcessStats_Total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Running":
			out.Values[i] = ec._ProcessStats_Running(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Sleeping":
			out.Values[i] = ec._ProcessStats_Sleeping(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Stopped":
			out.Values[i] = ec._ProcessStats_Stopped(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Zombie":
			out.Values[i] = ec._ProcessStats_Zombie(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query", "Node"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet, obj *models.Query) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "UUID":
			out.Values[i] = ec._Query_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Type":
			out.Values[i] = ec._Query_Type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Cluster":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Cluster(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Database":
			out.Values[i] = ec._Query_Database(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Content":
			out.Values[i] = ec._Query_Content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Plan":
			out.Values[i] = ec._Query_Plan(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "User":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_User(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "CreateAt":
			out.Values[i] = ec._Query_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "UpdateAt":
			out.Values[i] = ec._Query_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryConnectionImplementors = []string{"QueryConnection"}

func (ec *executionContext) _QueryConnection(ctx context.Context, sel ast.SelectionSet, obj *QueryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QueryConnection")
		case "pageInfo":
			out.Values[i] = ec._QueryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._QueryConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._QueryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryEdgeImplementors = []string{"QueryEdge"}

func (ec *executionContext) _QueryEdge(ctx context.Context, sel ast.SelectionSet, obj *QueryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QueryEdge")
		case "node":
			out.Values[i] = ec._QueryEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._QueryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryRootImplementors = []string{"QueryRoot"}

func (ec *executionContext) _QueryRoot(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryRootImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "QueryRoot",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QueryRoot")
		case "cluster":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_cluster(ctx, field)
				return res
			})
		case "clusters":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_clusters(ctx, field)
				return res
			})
		case "clusterSearch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_clusterSearch(ctx, field)
				return res
			})
		case "logs":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_logs(ctx, field)
				return res
			})
		case "me":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "options":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_options(ctx, field)
				return res
			})
		case "option":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_option(ctx, field)
				return res
			})
		case "query":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_query(ctx, field)
				return res
			})
		case "queries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_queries(ctx, field)
				return res
			})
		case "querySearch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_querySearch(ctx, field)
				return res
			})
		case "templates":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_templates(ctx, field)
				return res
			})
		case "ticket":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_ticket(ctx, field)
				return res
			})
		case "tickets":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_tickets(ctx, field)
				return res
			})
		case "ticketSearch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_ticketSearch(ctx, field)
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_user(ctx, field)
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_users(ctx, field)
				return res
			})
		case "userSearch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_userSearch(ctx, field)
				return res
			})
		case "avatars":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_avatars(ctx, field)
				return res
			})
		case "rule":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_rule(ctx, field)
				return res
			})
		case "rules":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_rules(ctx, field)
				return res
			})
		case "role":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_role(ctx, field)
				return res
			})
		case "roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_roles(ctx, field)
				return res
			})
		case "glossaries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_glossaries(ctx, field)
				return res
			})
		case "cron":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_cron(ctx, field)
				return res
			})
		case "crons":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_crons(ctx, field)
				return res
			})
		case "tasks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_tasks(ctx, field)
				return res
			})
		case "databases":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_databases(ctx, field)
				return res
			})
		case "statistics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_statistics(ctx, field)
				return res
			})
		case "environments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_environments(ctx, field)
				return res
			})
		case "metadata":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_metadata(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "testCluster":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_testCluster(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "testRegexp":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryRoot_testRegexp(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._QueryRoot___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._QueryRoot___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleImplementors = []string{"Role", "Node"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *models.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "UUID":
			out.Values[i] = ec._Role_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Name":
			out.Values[i] = ec._Role_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Description":
			out.Values[i] = ec._Role_Description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_Users(ctx, field, obj)
				return res
			})
		case "CreateAt":
			out.Values[i] = ec._Role_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "UpdateAt":
			out.Values[i] = ec._Role_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ruleImplementors = []string{"Rule", "Node"}

func (ec *executionContext) _Rule(ctx context.Context, sel ast.SelectionSet, obj *models.Rule) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, ruleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Rule")
		case "UUID":
			out.Values[i] = ec._Rule_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":
			out.Values[i] = ec._Rule_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Group":
			out.Values[i] = ec._Rule_Group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Description":
			out.Values[i] = ec._Rule_Description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "VldrGroup":
			out.Values[i] = ec._Rule_VldrGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Values":
			out.Values[i] = ec._Rule_Values(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Bitwise":
			out.Values[i] = ec._Rule_Bitwise(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Func":
			out.Values[i] = ec._Rule_Func(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._Rule_Message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Element":
			out.Values[i] = ec._Rule_Element(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Rule_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Rule_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statementImplementors = []string{"Statement", "Node"}

func (ec *executionContext) _Statement(ctx context.Context, sel ast.SelectionSet, obj *models.Statement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Statement")
		case "UUID":
			out.Values[i] = ec._Statement_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Sequence":
			out.Values[i] = ec._Statement_Sequence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Content":
			out.Values[i] = ec._Statement_Content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "TypeDesc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Statement_TypeDesc(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Status":
			out.Values[i] = ec._Statement_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Report":
			out.Values[i] = ec._Statement_Report(ctx, field, obj)
		case "Plan":
			out.Values[i] = ec._Statement_Plan(ctx, field, obj)
		case "Ticket":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Statement_Ticket(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "RowsAffected":
			out.Values[i] = ec._Statement_RowsAffected(ctx, field, obj)
		case "CreateAt":
			out.Values[i] = ec._Statement_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "UpdateAt":
			out.Values[i] = ec._Statement_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statementConnectionImplementors = []string{"StatementConnection"}

func (ec *executionContext) _StatementConnection(ctx context.Context, sel ast.SelectionSet, obj *StatementConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statementConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatementConnection")
		case "pageInfo":
			out.Values[i] = ec._StatementConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._StatementConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._StatementConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statementEdgeImplementors = []string{"StatementEdge"}

func (ec *executionContext) _StatementEdge(ctx context.Context, sel ast.SelectionSet, obj *StatementEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statementEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatementEdge")
		case "node":
			out.Values[i] = ec._StatementEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._StatementEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statisticImplementors = []string{"Statistic", "Node"}

func (ec *executionContext) _Statistic(ctx context.Context, sel ast.SelectionSet, obj *models.Statistic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, statisticImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Statistic")
		case "UUID":
			out.Values[i] = ec._Statistic_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Group":
			out.Values[i] = ec._Statistic_Group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Key":
			out.Values[i] = ec._Statistic_Key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Value":
			out.Values[i] = ec._Statistic_Value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Statistic_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Statistic_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionRootImplementors = []string{"SubscriptionRoot"}

func (ec *executionContext) _SubscriptionRoot(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, subscriptionRootImplementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "SubscriptionRoot",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "ticketStatusChanged":
		return ec._SubscriptionRoot_ticketStatusChanged(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var templateImplementors = []string{"Template", "Node"}

func (ec *executionContext) _Template(ctx context.Context, sel ast.SelectionSet, obj *models.Template) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, templateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Template")
		case "UUID":
			out.Values[i] = ec._Template_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subject":
			out.Values[i] = ec._Template_Subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Body":
			out.Values[i] = ec._Template_Body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Description":
			out.Values[i] = ec._Template_Description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAt":
			out.Values[i] = ec._Template_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateAt":
			out.Values[i] = ec._Template_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ticketImplementors = []string{"Ticket", "Searchable", "Node"}

func (ec *executionContext) _Ticket(ctx context.Context, sel ast.SelectionSet, obj *models.Ticket) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, ticketImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ticket")
		case "UUID":
			out.Values[i] = ec._Ticket_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Cluster":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ticket_Cluster(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Database":
			out.Values[i] = ec._Ticket_Database(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Subject":
			out.Values[i] = ec._Ticket_Subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Content":
			out.Values[i] = ec._Ticket_Content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Status":
			out.Values[i] = ec._Ticket_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "User":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ticket_User(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Reviewer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ticket_Reviewer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Cron":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ticket_Cron(ctx, field, obj)
				return res
			})
		case "Statements":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ticket_Statements(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Comments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Ticket_Comments(ctx, field, obj)
				return res
			})
		case "CreateAt":
			out.Values[i] = ec._Ticket_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "UpdateAt":
			out.Values[i] = ec._Ticket_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ticketConnectionImplementors = []string{"TicketConnection"}

func (ec *executionContext) _TicketConnection(ctx context.Context, sel ast.SelectionSet, obj *TicketConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, ticketConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TicketConnection")
		case "pageInfo":
			out.Values[i] = ec._TicketConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._TicketConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._TicketConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ticketEdgeImplementors = []string{"TicketEdge"}

func (ec *executionContext) _TicketEdge(ctx context.Context, sel ast.SelectionSet, obj *TicketEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, ticketEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TicketEdge")
		case "node":
			out.Values[i] = ec._TicketEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TicketEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ticketStatusChangePayloadImplementors = []string{"TicketStatusChangePayload"}

func (ec *executionContext) _TicketStatusChangePayload(ctx context.Context, sel ast.SelectionSet, obj *TicketStatusChangePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, ticketStatusChangePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TicketStatusChangePayload")
		case "TicketUUID":
			out.Values[i] = ec._TicketStatusChangePayload_TicketUUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._TicketStatusChangePayload_Message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User", "Searchable", "Node"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "UUID":
			out.Values[i] = ec._User_UUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Email":
			out.Values[i] = ec._User_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Status":
			out.Values[i] = ec._User_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Name":
			out.Values[i] = ec._User_Name(ctx, field, obj)
		case "Phone":
			out.Values[i] = ec._User_Phone(ctx, field, obj)
		case "Avatar":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_Avatar(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_Roles(ctx, field, obj)
				return res
			})
		case "Reviewers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_Reviewers(ctx, field, obj)
				return res
			})
		case "Statistics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_Statistics(ctx, field, obj)
				return res
			})
		case "Clusters":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_Clusters(ctx, field, obj)
				return res
			})
		case "Tickets":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_Tickets(ctx, field, obj)
				return res
			})
		case "Queries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_Queries(ctx, field, obj)
				return res
			})
		case "CreateAt":
			out.Values[i] = ec._User_CreateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "UpdateAt":
			out.Values[i] = ec._User_UpdateAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userConnectionImplementors = []string{"UserConnection"}

func (ec *executionContext) _UserConnection(ctx context.Context, sel ast.SelectionSet, obj *UserConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserConnection")
		case "pageInfo":
			out.Values[i] = ec._UserConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "edges":
			out.Values[i] = ec._UserConnection_edges(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._UserConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEdgeImplementors = []string{"UserEdge"}

func (ec *executionContext) _UserEdge(ctx context.Context, sel ast.SelectionSet, obj *UserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEdge")
		case "node":
			out.Values[i] = ec._UserEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._UserEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNActivateInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐActivateInput(ctx context.Context, v interface{}) (models.ActivateInput, error) {
	return ec.unmarshalInputActivateInput(ctx, v)
}

func (ec *executionContext) marshalNAvatar2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx context.Context, sel ast.SelectionSet, v models.Avatar) graphql.Marshaler {
	return ec._Avatar(ctx, sel, &v)
}

func (ec *executionContext) marshalNAvatar2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx context.Context, sel ast.SelectionSet, v *models.Avatar) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Avatar(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCPUStats2githubᚗcomᚋakhenakhᚋstatgoᚐCPUStats(ctx context.Context, sel ast.SelectionSet, v statgo.CPUStats) graphql.Marshaler {
	return ec._CPUStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNCPUStats2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐCPUStats(ctx context.Context, sel ast.SelectionSet, v *statgo.CPUStats) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CPUStats(ctx, sel, v)
}

func (ec *executionContext) marshalNCluster2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx context.Context, sel ast.SelectionSet, v models.Cluster) graphql.Marshaler {
	return ec._Cluster(ctx, sel, &v)
}

func (ec *executionContext) marshalNCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx context.Context, sel ast.SelectionSet, v *models.Cluster) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Cluster(ctx, sel, v)
}

func (ec *executionContext) marshalNClusterEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterEdge(ctx context.Context, sel ast.SelectionSet, v ClusterEdge) graphql.Marshaler {
	return ec._ClusterEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNClusterEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterEdge(ctx context.Context, sel ast.SelectionSet, v *ClusterEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ClusterEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v CommentEdge) graphql.Marshaler {
	return ec._CommentEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v *CommentEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateClusterInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateClusterInput(ctx context.Context, v interface{}) (models.CreateClusterInput, error) {
	return ec.unmarshalInputCreateClusterInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateCommentInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateCommentInput(ctx context.Context, v interface{}) (models.CreateCommentInput, error) {
	return ec.unmarshalInputCreateCommentInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateQueryInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateQueryInput(ctx context.Context, v interface{}) (models.CreateQueryInput, error) {
	return ec.unmarshalInputCreateQueryInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateTicketInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateTicketInput(ctx context.Context, v interface{}) (models.CreateTicketInput, error) {
	return ec.unmarshalInputCreateTicketInput(ctx, v)
}

func (ec *executionContext) unmarshalNCreateUserInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCreateUserInput(ctx context.Context, v interface{}) (models.CreateUserInput, error) {
	return ec.unmarshalInputCreateUserInput(ctx, v)
}

func (ec *executionContext) marshalNCronEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronEdge(ctx context.Context, sel ast.SelectionSet, v CronEdge) graphql.Marshaler {
	return ec._CronEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNCronEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronEdge(ctx context.Context, sel ast.SelectionSet, v *CronEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CronEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNDatabase2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐDatabase(ctx context.Context, sel ast.SelectionSet, v Database) graphql.Marshaler {
	return ec._Database(ctx, sel, &v)
}

func (ec *executionContext) marshalNDatabase2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐDatabase(ctx context.Context, sel ast.SelectionSet, v *Database) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Database(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGrantClustersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGrantClustersInput(ctx context.Context, v interface{}) (models.GrantClustersInput, error) {
	return ec.unmarshalInputGrantClustersInput(ctx, v)
}

func (ec *executionContext) unmarshalNGrantReviewersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGrantReviewersInput(ctx context.Context, v interface{}) (models.GrantReviewersInput, error) {
	return ec.unmarshalInputGrantReviewersInput(ctx, v)
}

func (ec *executionContext) unmarshalNGrantRolesInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGrantRolesInput(ctx context.Context, v interface{}) (models.GrantRolesInput, error) {
	return ec.unmarshalInputGrantRolesInput(ctx, v)
}

func (ec *executionContext) marshalNHostInfos2githubᚗcomᚋakhenakhᚋstatgoᚐHostInfos(ctx context.Context, sel ast.SelectionSet, v statgo.HostInfos) graphql.Marshaler {
	return ec._HostInfos(ctx, sel, &v)
}

func (ec *executionContext) marshalNHostInfos2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐHostInfos(ctx context.Context, sel ast.SelectionSet, v *statgo.HostInfos) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HostInfos(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLogEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogEdge(ctx context.Context, sel ast.SelectionSet, v LogEdge) graphql.Marshaler {
	return ec._LogEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNLogEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogEdge(ctx context.Context, sel ast.SelectionSet, v *LogEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LogEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLostPasswdInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐLostPasswdInput(ctx context.Context, v interface{}) (models.LostPasswdInput, error) {
	return ec.unmarshalInputLostPasswdInput(ctx, v)
}

func (ec *executionContext) marshalNMemStats2githubᚗcomᚋakhenakhᚋstatgoᚐMemStats(ctx context.Context, sel ast.SelectionSet, v statgo.MemStats) graphql.Marshaler {
	return ec._MemStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNMemStats2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐMemStats(ctx context.Context, sel ast.SelectionSet, v *statgo.MemStats) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MemStats(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *PageInfo) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPatchClusterStatusInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchClusterStatusInput(ctx context.Context, v interface{}) (models.PatchClusterStatusInput, error) {
	return ec.unmarshalInputPatchClusterStatusInput(ctx, v)
}

func (ec *executionContext) unmarshalNPatchEmailInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchEmailInput(ctx context.Context, v interface{}) (models.PatchEmailInput, error) {
	return ec.unmarshalInputPatchEmailInput(ctx, v)
}

func (ec *executionContext) unmarshalNPatchOptionValueInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchOptionValueInput(ctx context.Context, v interface{}) (models.PatchOptionValueInput, error) {
	return ec.unmarshalInputPatchOptionValueInput(ctx, v)
}

func (ec *executionContext) unmarshalNPatchPasswordInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchPasswordInput(ctx context.Context, v interface{}) (models.PatchPasswordInput, error) {
	return ec.unmarshalInputPatchPasswordInput(ctx, v)
}

func (ec *executionContext) unmarshalNPatchRuleBitwiseInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchRuleBitwiseInput(ctx context.Context, v interface{}) (models.PatchRuleBitwiseInput, error) {
	return ec.unmarshalInputPatchRuleBitwiseInput(ctx, v)
}

func (ec *executionContext) unmarshalNPatchRuleValuesInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchRuleValuesInput(ctx context.Context, v interface{}) (models.PatchRuleValuesInput, error) {
	return ec.unmarshalInputPatchRuleValuesInput(ctx, v)
}

func (ec *executionContext) unmarshalNPatchTicketStatusInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchTicketStatusInput(ctx context.Context, v interface{}) (models.PatchTicketStatusInput, error) {
	return ec.unmarshalInputPatchTicketStatusInput(ctx, v)
}

func (ec *executionContext) unmarshalNPatchUserStatusInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐPatchUserStatusInput(ctx context.Context, v interface{}) (models.PatchUserStatusInput, error) {
	return ec.unmarshalInputPatchUserStatusInput(ctx, v)
}

func (ec *executionContext) marshalNProcessStats2githubᚗcomᚋakhenakhᚋstatgoᚐProcessStats(ctx context.Context, sel ast.SelectionSet, v statgo.ProcessStats) graphql.Marshaler {
	return ec._ProcessStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNProcessStats2ᚖgithubᚗcomᚋakhenakhᚋstatgoᚐProcessStats(ctx context.Context, sel ast.SelectionSet, v *statgo.ProcessStats) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProcessStats(ctx, sel, v)
}

func (ec *executionContext) marshalNQueryEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryEdge(ctx context.Context, sel ast.SelectionSet, v QueryEdge) graphql.Marshaler {
	return ec._QueryEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNQueryEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryEdge(ctx context.Context, sel ast.SelectionSet, v *QueryEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._QueryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResetPasswdInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐResetPasswdInput(ctx context.Context, v interface{}) (models.ResetPasswdInput, error) {
	return ec.unmarshalInputResetPasswdInput(ctx, v)
}

func (ec *executionContext) unmarshalNRevokeClustersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRevokeClustersInput(ctx context.Context, v interface{}) (models.RevokeClustersInput, error) {
	return ec.unmarshalInputRevokeClustersInput(ctx, v)
}

func (ec *executionContext) unmarshalNRevokeReviewersInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRevokeReviewersInput(ctx context.Context, v interface{}) (models.RevokeReviewersInput, error) {
	return ec.unmarshalInputRevokeReviewersInput(ctx, v)
}

func (ec *executionContext) unmarshalNRevokeRolesInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRevokeRolesInput(ctx context.Context, v interface{}) (models.RevokeRolesInput, error) {
	return ec.unmarshalInputRevokeRolesInput(ctx, v)
}

func (ec *executionContext) unmarshalNRoleEnum2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐRoleEnum(ctx context.Context, v interface{}) (RoleEnum, error) {
	var res RoleEnum
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRoleEnum2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐRoleEnum(ctx context.Context, sel ast.SelectionSet, v RoleEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRoleEnum2ᚕgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐRoleEnum(ctx context.Context, v interface{}) ([]RoleEnum, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]RoleEnum, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRoleEnum2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐRoleEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRoleEnum2ᚕgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐRoleEnum(ctx context.Context, sel ast.SelectionSet, v []RoleEnum) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRoleEnum2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐRoleEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNScheduleTicketInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐScheduleTicketInput(ctx context.Context, v interface{}) (models.ScheduleTicketInput, error) {
	return ec.unmarshalInputScheduleTicketInput(ctx, v)
}

func (ec *executionContext) unmarshalNSoarQueryInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐSoarQueryInput(ctx context.Context, v interface{}) (models.SoarQueryInput, error) {
	return ec.unmarshalInputSoarQueryInput(ctx, v)
}

func (ec *executionContext) marshalNStatementConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementConnection(ctx context.Context, sel ast.SelectionSet, v StatementConnection) graphql.Marshaler {
	return ec._StatementConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatementConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementConnection(ctx context.Context, sel ast.SelectionSet, v *StatementConnection) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatementConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNStatementEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementEdge(ctx context.Context, sel ast.SelectionSet, v StatementEdge) graphql.Marshaler {
	return ec._StatementEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatementEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementEdge(ctx context.Context, sel ast.SelectionSet, v *StatementEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatementEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNTemplate2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx context.Context, sel ast.SelectionSet, v models.Template) graphql.Marshaler {
	return ec._Template(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplate2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx context.Context, sel ast.SelectionSet, v *models.Template) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Template(ctx, sel, v)
}

func (ec *executionContext) marshalNTicket2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx context.Context, sel ast.SelectionSet, v models.Ticket) graphql.Marshaler {
	return ec._Ticket(ctx, sel, &v)
}

func (ec *executionContext) marshalNTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx context.Context, sel ast.SelectionSet, v *models.Ticket) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Ticket(ctx, sel, v)
}

func (ec *executionContext) marshalNTicketEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketEdge(ctx context.Context, sel ast.SelectionSet, v TicketEdge) graphql.Marshaler {
	return ec._TicketEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNTicketEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketEdge(ctx context.Context, sel ast.SelectionSet, v *TicketEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TicketEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNTicketStatusChangePayload2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketStatusChangePayload(ctx context.Context, sel ast.SelectionSet, v TicketStatusChangePayload) graphql.Marshaler {
	return ec._TicketStatusChangePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTicketStatusChangePayload2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketStatusChangePayload(ctx context.Context, sel ast.SelectionSet, v *TicketStatusChangePayload) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TicketStatusChangePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUInt162uint16(ctx context.Context, v interface{}) (uint16, error) {
	return UnmarshalUInt16(v)
}

func (ec *executionContext) marshalNUInt162uint16(ctx context.Context, sel ast.SelectionSet, v uint16) graphql.Marshaler {
	res := MarshalUInt16(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUInt2uint(ctx context.Context, v interface{}) (uint, error) {
	return UnmarshalUInt(v)
}

func (ec *executionContext) marshalNUInt2uint(ctx context.Context, sel ast.SelectionSet, v uint) graphql.Marshaler {
	res := MarshalUInt(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUInt82uint8(ctx context.Context, v interface{}) (uint8, error) {
	return UnmarshalUInt8(v)
}

func (ec *executionContext) marshalNUInt82uint8(ctx context.Context, sel ast.SelectionSet, v uint8) graphql.Marshaler {
	res := MarshalUInt8(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateClusterInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateClusterInput(ctx context.Context, v interface{}) (models.UpdateClusterInput, error) {
	return ec.unmarshalInputUpdateClusterInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProfileInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateProfileInput(ctx context.Context, v interface{}) (models.UpdateProfileInput, error) {
	return ec.unmarshalInputUpdateProfileInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateTicketInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateTicketInput(ctx context.Context, v interface{}) (models.UpdateTicketInput, error) {
	return ec.unmarshalInputUpdateTicketInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateUserInput(ctx context.Context, v interface{}) (models.UpdateUserInput, error) {
	return ec.unmarshalInputUpdateUserInput(ctx, v)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserEdge2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v UserEdge) graphql.Marshaler {
	return ec._UserEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v *UserEdge) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserLoginInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUserLoginInput(ctx context.Context, v interface{}) (models.UserLoginInput, error) {
	return ec.unmarshalInputUserLoginInput(ctx, v)
}

func (ec *executionContext) unmarshalNUserRegisterInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUserRegisterInput(ctx context.Context, v interface{}) (models.UserRegisterInput, error) {
	return ec.unmarshalInputUserRegisterInput(ctx, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOActivatePayload2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐActivatePayload(ctx context.Context, sel ast.SelectionSet, v ActivatePayload) graphql.Marshaler {
	return ec._ActivatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOActivatePayload2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐActivatePayload(ctx context.Context, sel ast.SelectionSet, v *ActivatePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActivatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOAvatar2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx context.Context, sel ast.SelectionSet, v models.Avatar) graphql.Marshaler {
	return ec._Avatar(ctx, sel, &v)
}

func (ec *executionContext) marshalOAvatar2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx context.Context, sel ast.SelectionSet, v []*models.Avatar) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAvatar2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAvatar2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐAvatar(ctx context.Context, sel ast.SelectionSet, v *models.Avatar) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Avatar(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOCluster2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx context.Context, sel ast.SelectionSet, v models.Cluster) graphql.Marshaler {
	return ec._Cluster(ctx, sel, &v)
}

func (ec *executionContext) marshalOCluster2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCluster(ctx context.Context, sel ast.SelectionSet, v *models.Cluster) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Cluster(ctx, sel, v)
}

func (ec *executionContext) marshalOClusterConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterConnection(ctx context.Context, sel ast.SelectionSet, v ClusterConnection) graphql.Marshaler {
	return ec._ClusterConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOClusterConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterConnection(ctx context.Context, sel ast.SelectionSet, v *ClusterConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClusterConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOClusterEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterEdge(ctx context.Context, sel ast.SelectionSet, v []*ClusterEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClusterEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐClusterEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComment2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v models.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalOComment2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v *models.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalOCommentConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentConnection(ctx context.Context, sel ast.SelectionSet, v CommentConnection) graphql.Marshaler {
	return ec._CommentConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommentConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentConnection(ctx context.Context, sel ast.SelectionSet, v *CommentConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCommentEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v []*CommentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommentEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCommentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCron2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx context.Context, sel ast.SelectionSet, v models.Cron) graphql.Marshaler {
	return ec._Cron(ctx, sel, &v)
}

func (ec *executionContext) marshalOCron2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx context.Context, sel ast.SelectionSet, v []*models.Cron) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCron2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCron2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐCron(ctx context.Context, sel ast.SelectionSet, v *models.Cron) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Cron(ctx, sel, v)
}

func (ec *executionContext) marshalOCronConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronConnection(ctx context.Context, sel ast.SelectionSet, v CronConnection) graphql.Marshaler {
	return ec._CronConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOCronConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronConnection(ctx context.Context, sel ast.SelectionSet, v *CronConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CronConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCronEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronEdge(ctx context.Context, sel ast.SelectionSet, v []*CronEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCronEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐCronEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODatabase2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐDatabase(ctx context.Context, sel ast.SelectionSet, v []*Database) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDatabase2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐDatabase(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEnvironments2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐEnvironments(ctx context.Context, sel ast.SelectionSet, v Environments) graphql.Marshaler {
	return ec._Environments(ctx, sel, &v)
}

func (ec *executionContext) marshalOEnvironments2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐEnvironments(ctx context.Context, sel ast.SelectionSet, v *Environments) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Environments(ctx, sel, v)
}

func (ec *executionContext) marshalOGlossary2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGlossary(ctx context.Context, sel ast.SelectionSet, v models.Glossary) graphql.Marshaler {
	return ec._Glossary(ctx, sel, &v)
}

func (ec *executionContext) marshalOGlossary2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGlossary(ctx context.Context, sel ast.SelectionSet, v []*models.Glossary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGlossary2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGlossary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGlossary2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐGlossary(ctx context.Context, sel ast.SelectionSet, v *models.Glossary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Glossary(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) marshalOLog2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐLog(ctx context.Context, sel ast.SelectionSet, v models.Log) graphql.Marshaler {
	return ec._Log(ctx, sel, &v)
}

func (ec *executionContext) marshalOLog2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐLog(ctx context.Context, sel ast.SelectionSet, v *models.Log) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Log(ctx, sel, v)
}

func (ec *executionContext) marshalOLogConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogConnection(ctx context.Context, sel ast.SelectionSet, v LogConnection) graphql.Marshaler {
	return ec._LogConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOLogConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogConnection(ctx context.Context, sel ast.SelectionSet, v *LogConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LogConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOLogEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogEdge(ctx context.Context, sel ast.SelectionSet, v []*LogEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLogEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLogEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLoginPayload2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLoginPayload(ctx context.Context, sel ast.SelectionSet, v LoginPayload) graphql.Marshaler {
	return ec._LoginPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalOLoginPayload2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐLoginPayload(ctx context.Context, sel ast.SelectionSet, v *LoginPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LoginPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOOption2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐOption(ctx context.Context, sel ast.SelectionSet, v models.Option) graphql.Marshaler {
	return ec._Option(ctx, sel, &v)
}

func (ec *executionContext) marshalOOption2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐOption(ctx context.Context, sel ast.SelectionSet, v []*models.Option) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOption2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOption2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐOption(ctx context.Context, sel ast.SelectionSet, v *models.Option) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Option(ctx, sel, v)
}

func (ec *executionContext) marshalOQuery2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐQuery(ctx context.Context, sel ast.SelectionSet, v models.Query) graphql.Marshaler {
	return ec._Query(ctx, sel, &v)
}

func (ec *executionContext) marshalOQuery2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐQuery(ctx context.Context, sel ast.SelectionSet, v *models.Query) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Query(ctx, sel, v)
}

func (ec *executionContext) marshalOQueryConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryConnection(ctx context.Context, sel ast.SelectionSet, v QueryConnection) graphql.Marshaler {
	return ec._QueryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOQueryConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryConnection(ctx context.Context, sel ast.SelectionSet, v *QueryConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QueryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOQueryEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryEdge(ctx context.Context, sel ast.SelectionSet, v []*QueryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQueryEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐQueryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORole2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v models.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalORole2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v []*models.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORole2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORole2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v *models.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) marshalORule2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRule(ctx context.Context, sel ast.SelectionSet, v models.Rule) graphql.Marshaler {
	return ec._Rule(ctx, sel, &v)
}

func (ec *executionContext) marshalORule2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRule(ctx context.Context, sel ast.SelectionSet, v []*models.Rule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORule2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRule(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORule2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐRule(ctx context.Context, sel ast.SelectionSet, v *models.Rule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Rule(ctx, sel, v)
}

func (ec *executionContext) marshalOStatement2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatement(ctx context.Context, sel ast.SelectionSet, v models.Statement) graphql.Marshaler {
	return ec._Statement(ctx, sel, &v)
}

func (ec *executionContext) marshalOStatement2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatement(ctx context.Context, sel ast.SelectionSet, v *models.Statement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Statement(ctx, sel, v)
}

func (ec *executionContext) marshalOStatementEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementEdge(ctx context.Context, sel ast.SelectionSet, v []*StatementEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatementEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐStatementEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStatistic2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatistic(ctx context.Context, sel ast.SelectionSet, v models.Statistic) graphql.Marshaler {
	return ec._Statistic(ctx, sel, &v)
}

func (ec *executionContext) marshalOStatistic2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatistic(ctx context.Context, sel ast.SelectionSet, v []*models.Statistic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStatistic2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatistic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStatistic2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐStatistic(ctx context.Context, sel ast.SelectionSet, v *models.Statistic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Statistic(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) marshalOTemplate2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx context.Context, sel ast.SelectionSet, v models.Template) graphql.Marshaler {
	return ec._Template(ctx, sel, &v)
}

func (ec *executionContext) marshalOTemplate2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx context.Context, sel ast.SelectionSet, v []*models.Template) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTemplate2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTemplate2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTemplate(ctx context.Context, sel ast.SelectionSet, v *models.Template) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Template(ctx, sel, v)
}

func (ec *executionContext) marshalOTicket2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx context.Context, sel ast.SelectionSet, v models.Ticket) graphql.Marshaler {
	return ec._Ticket(ctx, sel, &v)
}

func (ec *executionContext) marshalOTicket2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐTicket(ctx context.Context, sel ast.SelectionSet, v *models.Ticket) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Ticket(ctx, sel, v)
}

func (ec *executionContext) marshalOTicketConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketConnection(ctx context.Context, sel ast.SelectionSet, v TicketConnection) graphql.Marshaler {
	return ec._TicketConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOTicketConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketConnection(ctx context.Context, sel ast.SelectionSet, v *TicketConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TicketConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTicketEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketEdge(ctx context.Context, sel ast.SelectionSet, v []*TicketEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTicketEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐTicketEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOUInt2uint(ctx context.Context, v interface{}) (uint, error) {
	return UnmarshalUInt(v)
}

func (ec *executionContext) marshalOUInt2uint(ctx context.Context, sel ast.SelectionSet, v uint) graphql.Marshaler {
	return MarshalUInt(v)
}

func (ec *executionContext) unmarshalOUInt642uint64(ctx context.Context, v interface{}) (uint64, error) {
	return UnmarshalUInt64(v)
}

func (ec *executionContext) marshalOUInt642uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	return MarshalUInt64(v)
}

func (ec *executionContext) unmarshalOUInt82uint8(ctx context.Context, v interface{}) (uint8, error) {
	return UnmarshalUInt8(v)
}

func (ec *executionContext) marshalOUInt82uint8(ctx context.Context, sel ast.SelectionSet, v uint8) graphql.Marshaler {
	return MarshalUInt8(v)
}

func (ec *executionContext) unmarshalOUpdateTemplateInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateTemplateInput(ctx context.Context, v interface{}) (models.UpdateTemplateInput, error) {
	return ec.unmarshalInputUpdateTemplateInput(ctx, v)
}

func (ec *executionContext) unmarshalOUpdateTemplateInput2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateTemplateInput(ctx context.Context, v interface{}) (*models.UpdateTemplateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUpdateTemplateInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUpdateTemplateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUser2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserConnection2githubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserConnection(ctx context.Context, sel ast.SelectionSet, v UserConnection) graphql.Marshaler {
	return ec._UserConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserConnection2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserConnection(ctx context.Context, sel ast.SelectionSet, v *UserConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOUserEdge2ᚕᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v []*UserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserEdge2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋgqlapiᚐUserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOValidateConnectionInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidateConnectionInput(ctx context.Context, v interface{}) (models.ValidateConnectionInput, error) {
	return ec.unmarshalInputValidateConnectionInput(ctx, v)
}

func (ec *executionContext) unmarshalOValidateConnectionInput2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidateConnectionInput(ctx context.Context, v interface{}) (*models.ValidateConnectionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOValidateConnectionInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidateConnectionInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOValidatePatternInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidatePatternInput(ctx context.Context, v interface{}) (models.ValidatePatternInput, error) {
	return ec.unmarshalInputValidatePatternInput(ctx, v)
}

func (ec *executionContext) unmarshalOValidatePatternInput2ᚖgithubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidatePatternInput(ctx context.Context, v interface{}) (*models.ValidatePatternInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOValidatePatternInput2githubᚗcomᚋmia0x75ᚋhaloᚋmodelsᚐValidatePatternInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
