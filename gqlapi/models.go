// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlapi

import (
	"fmt"
	"io"
	"strconv"

	"github.com/akhenakh/statgo"
	"github.com/mia0x75/halo/models"
)

// 接口定义
type Node interface {
	IsNode()
	// 创建时间
	GetCreateAt() uint
	// 最后一次修改时间
	GetUpdateAt() *uint
}

type Searchable interface {
	IsSearchable()
}

type ActivatePayload struct {
	Email string `json:"Email"`
}

type ClusterConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*ClusterEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

type ClusterEdge struct {
	// 端
	Node *models.Cluster `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

type CommentConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*CommentEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

type CommentEdge struct {
	// 端
	Node *models.Comment `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

type CronConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*CronEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

type CronEdge struct {
	// 端
	Node *models.Cron `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

// 数据库信息
type Database struct {
	// 名称
	Name string `json:"Name"`
	// 字符集
	Charset string `json:"Charset"`
	// 排序规则
	Collate string `json:"Collate"`
}

type Environments struct {
	CPUStats     *statgo.CPUStats     `json:"CPUStats"`
	HostInfos    *statgo.HostInfos    `json:"HostInfos"`
	ProcessStats *statgo.ProcessStats `json:"ProcessStats"`
	MemStats     *statgo.MemStats     `json:"MemStats"`
}

type LogConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*LogEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

type LogEdge struct {
	// 端
	Node *models.Log `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

// 用户登录后返回当前用户信息和令牌
type LoginPayload struct {
	// 用户信息
	Me *models.User `json:"Me"`
	// 登录令牌
	Token string `json:"Token"`
}

// 翻页信息
type PageInfo struct {
	// 是否可以向前翻页
	HasNextPage bool `json:"hasNextPage"`
	// 是否可以向后翻页
	HasPreviousPage bool `json:"hasPreviousPage"`
	// 向前翻页时的光标
	StartCursor string `json:"startCursor"`
	// 向后翻页时的光标
	EndCursor string `json:"endCursor"`
}

type QueryConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*QueryEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

type QueryEdge struct {
	// 端
	Node *models.Query `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

type StatementConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*StatementEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

type StatementEdge struct {
	// 端
	Node *models.Statement `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

type TicketConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*TicketEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

type TicketEdge struct {
	// 端
	Node *models.Ticket `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

type TicketStatusChangePayload struct {
	TicketUUID string `json:"TicketUUID"`
	Message    string `json:"Message"`
}

// 用户连接定义
type UserConnection struct {
	// 分页信息
	PageInfo *PageInfo `json:"pageInfo"`
	// 记录信息
	Edges []*UserEdge `json:"edges,omitempty"`
	// 记录总数
	TotalCount int `json:"totalCount"`
}

// 连接中用户的端
type UserEdge struct {
	// 端
	Node *models.User `json:"node,omitempty"`
	// 分页时使用的光标
	Cursor string `json:"cursor"`
}

type ClusterStatusEnum string

const (
	// 正常
	ClusterStatusEnumNormal ClusterStatusEnum = "NORMAL"
	// 禁用
	ClusterStatusEnumDisabled ClusterStatusEnum = "DISABLED"
)

var AllClusterStatusEnum = []ClusterStatusEnum{
	ClusterStatusEnumNormal,
	ClusterStatusEnumDisabled,
}

func (e ClusterStatusEnum) IsValid() bool {
	switch e {
	case ClusterStatusEnumNormal, ClusterStatusEnumDisabled:
		return true
	}
	return false
}

func (e ClusterStatusEnum) String() string {
	return string(e)
}

func (e *ClusterStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ClusterStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ClusterStatusEnum", str)
	}
	return nil
}

func (e ClusterStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 关联表类型描述
type EdgeEnum string

const (
	// 用户到审核的多对多关系
	EdgeEnumUserToReviewer EdgeEnum = "USER_TO_REVIEWER"
	// 用户到角色的多对多关系
	EdgeEnumUserToRole EdgeEnum = "USER_TO_ROLE"
	// 用户到群集的多对多关系
	EdgeEnumUserToCluster EdgeEnum = "USER_TO_CLUSTER"
)

var AllEdgeEnum = []EdgeEnum{
	EdgeEnumUserToReviewer,
	EdgeEnumUserToRole,
	EdgeEnumUserToCluster,
}

func (e EdgeEnum) IsValid() bool {
	switch e {
	case EdgeEnumUserToReviewer, EdgeEnumUserToRole, EdgeEnumUserToCluster:
		return true
	}
	return false
}

func (e EdgeEnum) String() string {
	return string(e)
}

func (e *EdgeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EdgeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EdgeEnum", str)
	}
	return nil
}

func (e EdgeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 性别定义
type GenderEnum string

const (
	// 无
	GenderEnumNa GenderEnum = "NA"
	// 男
	GenderEnumMale GenderEnum = "MALE"
	// 女
	GenderEnumFemale GenderEnum = "FEMALE"
)

var AllGenderEnum = []GenderEnum{
	GenderEnumNa,
	GenderEnumMale,
	GenderEnumFemale,
}

func (e GenderEnum) IsValid() bool {
	switch e {
	case GenderEnumNa, GenderEnumMale, GenderEnumFemale:
		return true
	}
	return false
}

func (e GenderEnum) String() string {
	return string(e)
}

func (e *GenderEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GenderEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GenderEnum", str)
	}
	return nil
}

func (e GenderEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QueryTypeEnum string

const (
	// 数据查询
	QueryTypeEnumQuery QueryTypeEnum = "QUERY"
	// 查询分析
	QueryTypeEnumAnalyze QueryTypeEnum = "ANALYZE"
	// 查询重写
	QueryTypeEnumRewrite QueryTypeEnum = "REWRITE"
)

var AllQueryTypeEnum = []QueryTypeEnum{
	QueryTypeEnumQuery,
	QueryTypeEnumAnalyze,
	QueryTypeEnumRewrite,
}

func (e QueryTypeEnum) IsValid() bool {
	switch e {
	case QueryTypeEnumQuery, QueryTypeEnumAnalyze, QueryTypeEnumRewrite:
		return true
	}
	return false
}

func (e QueryTypeEnum) String() string {
	return string(e)
}

func (e *QueryTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QueryTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QueryTypeEnum", str)
	}
	return nil
}

func (e QueryTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 角色定义
type RoleEnum string

const (
	// 管理员
	RoleEnumAdmin RoleEnum = "ADMIN"
	// 工单审核人
	RoleEnumReviewer RoleEnum = "REVIEWER"
	// 开发者
	RoleEnumDeveloper RoleEnum = "DEVELOPER"
	// 普通用户
	RoleEnumUser RoleEnum = "USER"
	// 访客
	RoleEnumGuest RoleEnum = "GUEST"
)

var AllRoleEnum = []RoleEnum{
	RoleEnumAdmin,
	RoleEnumReviewer,
	RoleEnumDeveloper,
	RoleEnumUser,
	RoleEnumGuest,
}

func (e RoleEnum) IsValid() bool {
	switch e {
	case RoleEnumAdmin, RoleEnumReviewer, RoleEnumDeveloper, RoleEnumUser, RoleEnumGuest:
		return true
	}
	return false
}

func (e RoleEnum) String() string {
	return string(e)
}

func (e *RoleEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleEnum", str)
	}
	return nil
}

func (e RoleEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// SQL语句抽象语法树类型枚举
type StatementTypeEnum string

const (
	StatementTypeEnumAlterTable     StatementTypeEnum = "ALTER_TABLE"
	StatementTypeEnumAnalyzeTable   StatementTypeEnum = "ANALYZE_TABLE"
	StatementTypeEnumBegin          StatementTypeEnum = "BEGIN"
	StatementTypeEnumCommit         StatementTypeEnum = "COMMIT"
	StatementTypeEnumCreateDatabase StatementTypeEnum = "CREATE_DATABASE"
	StatementTypeEnumCreateIndex    StatementTypeEnum = "CREATE_INDEX"
	StatementTypeEnumCreateTable    StatementTypeEnum = "CREATE_TABLE"
	StatementTypeEnumCreateView     StatementTypeEnum = "CREATE_VIEW"
	StatementTypeEnumCreateUser     StatementTypeEnum = "CREATE_USER"
	StatementTypeEnumDelete         StatementTypeEnum = "DELETE"
	StatementTypeEnumDropDatabase   StatementTypeEnum = "DROP_DATABASE"
	StatementTypeEnumDropIndex      StatementTypeEnum = "DROP_INDEX"
	StatementTypeEnumDropTable      StatementTypeEnum = "DROP_TABLE"
	StatementTypeEnumExplain        StatementTypeEnum = "EXPLAIN"
	StatementTypeEnumInsert         StatementTypeEnum = "INSERT"
	StatementTypeEnumLoadData       StatementTypeEnum = "LOAD_DATA"
	StatementTypeEnumRollback       StatementTypeEnum = "ROLLBACK"
	StatementTypeEnumSelect         StatementTypeEnum = "SELECT"
	StatementTypeEnumSet            StatementTypeEnum = "SET"
	StatementTypeEnumShow           StatementTypeEnum = "SHOW"
	StatementTypeEnumTruncateTable  StatementTypeEnum = "TRUNCATE_TABLE"
	StatementTypeEnumUpdate         StatementTypeEnum = "UPDATE"
	StatementTypeEnumGrant          StatementTypeEnum = "GRANT"
	StatementTypeEnumRevoke         StatementTypeEnum = "REVOKE"
	StatementTypeEnumDeallocate     StatementTypeEnum = "DEALLOCATE"
	StatementTypeEnumExecute        StatementTypeEnum = "EXECUTE"
	StatementTypeEnumPrepare        StatementTypeEnum = "PREPARE"
	StatementTypeEnumUse            StatementTypeEnum = "USE"
)

var AllStatementTypeEnum = []StatementTypeEnum{
	StatementTypeEnumAlterTable,
	StatementTypeEnumAnalyzeTable,
	StatementTypeEnumBegin,
	StatementTypeEnumCommit,
	StatementTypeEnumCreateDatabase,
	StatementTypeEnumCreateIndex,
	StatementTypeEnumCreateTable,
	StatementTypeEnumCreateView,
	StatementTypeEnumCreateUser,
	StatementTypeEnumDelete,
	StatementTypeEnumDropDatabase,
	StatementTypeEnumDropIndex,
	StatementTypeEnumDropTable,
	StatementTypeEnumExplain,
	StatementTypeEnumInsert,
	StatementTypeEnumLoadData,
	StatementTypeEnumRollback,
	StatementTypeEnumSelect,
	StatementTypeEnumSet,
	StatementTypeEnumShow,
	StatementTypeEnumTruncateTable,
	StatementTypeEnumUpdate,
	StatementTypeEnumGrant,
	StatementTypeEnumRevoke,
	StatementTypeEnumDeallocate,
	StatementTypeEnumExecute,
	StatementTypeEnumPrepare,
	StatementTypeEnumUse,
}

func (e StatementTypeEnum) IsValid() bool {
	switch e {
	case StatementTypeEnumAlterTable, StatementTypeEnumAnalyzeTable, StatementTypeEnumBegin, StatementTypeEnumCommit, StatementTypeEnumCreateDatabase, StatementTypeEnumCreateIndex, StatementTypeEnumCreateTable, StatementTypeEnumCreateView, StatementTypeEnumCreateUser, StatementTypeEnumDelete, StatementTypeEnumDropDatabase, StatementTypeEnumDropIndex, StatementTypeEnumDropTable, StatementTypeEnumExplain, StatementTypeEnumInsert, StatementTypeEnumLoadData, StatementTypeEnumRollback, StatementTypeEnumSelect, StatementTypeEnumSet, StatementTypeEnumShow, StatementTypeEnumTruncateTable, StatementTypeEnumUpdate, StatementTypeEnumGrant, StatementTypeEnumRevoke, StatementTypeEnumDeallocate, StatementTypeEnumExecute, StatementTypeEnumPrepare, StatementTypeEnumUse:
		return true
	}
	return false
}

func (e StatementTypeEnum) String() string {
	return string(e)
}

func (e *StatementTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatementTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatementTypeEnum", str)
	}
	return nil
}

func (e StatementTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketStatusEnum string

const (
	// 工单保存成功，等待系统审核
	TicketStatusEnumWaitingForVld TicketStatusEnum = "WAITING_FOR_VLD"
	// 系统审核不通过，一条或者多条语句违反规则限制，需要修改后重新提交
	TicketStatusEnumVldFailure TicketStatusEnum = "VLD_FAILURE"
	// 系统审核不通过，但部分或全部语句存在警告
	TicketStatusEnumVldWarning TicketStatusEnum = "VLD_WARNING"
	// 系统审核通过，等待人工审核
	TicketStatusEnumWaitingForMrv TicketStatusEnum = "WAITING_FOR_MRV"
	// 人工审核不通过，需要修改后重新提交
	TicketStatusEnumMrvFailure TicketStatusEnum = "MRV_FAILURE"
	// 人工审核通过，等待上线执行
	TicketStatusEnumLgtm TicketStatusEnum = "LGTM"
	// 上线执行完成
	TicketStatusEnumDone TicketStatusEnum = "DONE"
	// 上线执行失败，部分或全部未执行
	TicketStatusEnumExecFailure TicketStatusEnum = "EXEC_FAILURE"
	// 发起人主动关闭不需要执行
	TicketStatusEnumClosed TicketStatusEnum = "CLOSED"
)

var AllTicketStatusEnum = []TicketStatusEnum{
	TicketStatusEnumWaitingForVld,
	TicketStatusEnumVldFailure,
	TicketStatusEnumVldWarning,
	TicketStatusEnumWaitingForMrv,
	TicketStatusEnumMrvFailure,
	TicketStatusEnumLgtm,
	TicketStatusEnumDone,
	TicketStatusEnumExecFailure,
	TicketStatusEnumClosed,
}

func (e TicketStatusEnum) IsValid() bool {
	switch e {
	case TicketStatusEnumWaitingForVld, TicketStatusEnumVldFailure, TicketStatusEnumVldWarning, TicketStatusEnumWaitingForMrv, TicketStatusEnumMrvFailure, TicketStatusEnumLgtm, TicketStatusEnumDone, TicketStatusEnumExecFailure, TicketStatusEnumClosed:
		return true
	}
	return false
}

func (e TicketStatusEnum) String() string {
	return string(e)
}

func (e *TicketStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketStatusEnum", str)
	}
	return nil
}

func (e TicketStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatusEnum string

const (
	// 正常
	UserStatusEnumNormal UserStatusEnum = "NORMAL"
	// 禁用
	UserStatusEnumBlocked UserStatusEnum = "BLOCKED"
	// 等待管理员审核
	UserStatusEnumPending UserStatusEnum = "PENDING"
)

var AllUserStatusEnum = []UserStatusEnum{
	UserStatusEnumNormal,
	UserStatusEnumBlocked,
	UserStatusEnumPending,
}

func (e UserStatusEnum) IsValid() bool {
	switch e {
	case UserStatusEnumNormal, UserStatusEnumBlocked, UserStatusEnumPending:
		return true
	}
	return false
}

func (e UserStatusEnum) String() string {
	return string(e)
}

func (e *UserStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatusEnum", str)
	}
	return nil
}

func (e UserStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
